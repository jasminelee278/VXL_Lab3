
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f30  08002f30  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  08002f30  08002f30  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f30  08002f30  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08002f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200000f4  0800302c  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800302c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bca  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7a  00000000  00000000  00029ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ec1  00000000  00000000  0002cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1a8  00000000  00000000  00043c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082586  00000000  00000000  0004fda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d232f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002914  00000000  00000000  000d2384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f4 	.word	0x200000f4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ef4 	.word	0x08002ef4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f8 	.word	0x200000f8
 8000148:	08002ef4 	.word	0x08002ef4

0800014c <isButtonPressed>:

GPIO_TypeDef* butt_ports[MAX_BUTTONS] = {BUTT_1_GPIO_Port, BUTT_2_GPIO_Port, BUTT_3_GPIO_Port};
uint16_t butt_pins[MAX_BUTTONS] = {BUTT_1_Pin, BUTT_2_Pin, BUTT_3_Pin};


int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_pressed[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_pressed[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000110 	.word	0x20000110

08000180 <getKeyInput>:
		return 1;
	}
	return 0;
}

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTONS; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e07c      	b.n	8000286 <getKeyInput+0x106>
		KeyReg2[i] = KeyReg1[i];
 800018c:	4a42      	ldr	r2, [pc, #264]	; (8000298 <getKeyInput+0x118>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4941      	ldr	r1, [pc, #260]	; (800029c <getKeyInput+0x11c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800019c:	4a40      	ldr	r2, [pc, #256]	; (80002a0 <getKeyInput+0x120>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493c      	ldr	r1, [pc, #240]	; (8000298 <getKeyInput+0x118>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(butt_ports[i], butt_pins[i]);
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <getKeyInput+0x124>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493c      	ldr	r1, [pc, #240]	; (80002a8 <getKeyInput+0x128>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001bc:	4619      	mov	r1, r3
 80001be:	4610      	mov	r0, r2
 80001c0:	f001 fe6c 	bl	8001e9c <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	4619      	mov	r1, r3
 80001c8:	4a35      	ldr	r2, [pc, #212]	; (80002a0 <getKeyInput+0x120>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001d0:	4a31      	ldr	r2, [pc, #196]	; (8000298 <getKeyInput+0x118>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4931      	ldr	r1, [pc, #196]	; (80002a0 <getKeyInput+0x120>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d14d      	bne.n	8000280 <getKeyInput+0x100>
 80001e4:	4a2c      	ldr	r2, [pc, #176]	; (8000298 <getKeyInput+0x118>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	492b      	ldr	r1, [pc, #172]	; (800029c <getKeyInput+0x11c>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d143      	bne.n	8000280 <getKeyInput+0x100>
			if (KeyReg2[i] != KeyReg3[i]){
 80001f8:	4a28      	ldr	r2, [pc, #160]	; (800029c <getKeyInput+0x11c>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	492a      	ldr	r1, [pc, #168]	; (80002ac <getKeyInput+0x12c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000208:	429a      	cmp	r2, r3
 800020a:	d019      	beq.n	8000240 <getKeyInput+0xc0>
				KeyReg3[i] = KeyReg2[i];
 800020c:	4a23      	ldr	r2, [pc, #140]	; (800029c <getKeyInput+0x11c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	4925      	ldr	r1, [pc, #148]	; (80002ac <getKeyInput+0x12c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800021c:	4a1f      	ldr	r2, [pc, #124]	; (800029c <getKeyInput+0x11c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d12b      	bne.n	8000280 <getKeyInput+0x100>
					button_pressed[i] = 1;
 8000228:	4a21      	ldr	r2, [pc, #132]	; (80002b0 <getKeyInput+0x130>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2101      	movs	r1, #1
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimeOutForKeyPress[i] = 500;
 8000232:	4a20      	ldr	r2, [pc, #128]	; (80002b4 <getKeyInput+0x134>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800023a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023e:	e01f      	b.n	8000280 <getKeyInput+0x100>
				}
			}
			else {
				TimeOutForKeyPress[i]--;
 8000240:	4a1c      	ldr	r2, [pc, #112]	; (80002b4 <getKeyInput+0x134>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	1e5a      	subs	r2, r3, #1
 800024a:	491a      	ldr	r1, [pc, #104]	; (80002b4 <getKeyInput+0x134>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000252:	4a18      	ldr	r2, [pc, #96]	; (80002b4 <getKeyInput+0x134>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d110      	bne.n	8000280 <getKeyInput+0x100>
					TimeOutForKeyPress[i] = 500;
 800025e:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <getKeyInput+0x134>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg2[i] == PRESSED_STATE){
 800026a:	4a0c      	ldr	r2, [pc, #48]	; (800029c <getKeyInput+0x11c>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d104      	bne.n	8000280 <getKeyInput+0x100>
						button_long_pressed[i] = 1;
 8000276:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <getKeyInput+0x138>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTONS; i++){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b02      	cmp	r3, #2
 800028a:	f77f af7f 	ble.w	800018c <getKeyInput+0xc>
				}
			}
		}
	}

}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000018 	.word	0x20000018
 80002a0:	20000000 	.word	0x20000000
 80002a4:	2000003c 	.word	0x2000003c
 80002a8:	20000048 	.word	0x20000048
 80002ac:	20000024 	.word	0x20000024
 80002b0:	20000110 	.word	0x20000110
 80002b4:	20000030 	.word	0x20000030
 80002b8:	2000011c 	.word	0x2000011c

080002bc <update_led_counter>:

int green_temp_counter;
int yellow_temp_counter;


void update_led_counter(){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	red_counter = led_red_duration;
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <update_led_counter+0x24>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <update_led_counter+0x28>)
 80002c6:	6013      	str	r3, [r2, #0]
	yellow_counter = led_yellow_duration;
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <update_led_counter+0x2c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a07      	ldr	r2, [pc, #28]	; (80002ec <update_led_counter+0x30>)
 80002ce:	6013      	str	r3, [r2, #0]
	green_counter = led_green_duration;
 80002d0:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <update_led_counter+0x34>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <update_led_counter+0x38>)
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	20000058 	.word	0x20000058
 80002e4:	20000064 	.word	0x20000064
 80002e8:	2000005c 	.word	0x2000005c
 80002ec:	20000068 	.word	0x20000068
 80002f0:	20000060 	.word	0x20000060
 80002f4:	2000006c 	.word	0x2000006c

080002f8 <red_duration_process>:

void red_duration_process(){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	led_red_duration = red_counter;
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <red_duration_process+0x78>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <red_duration_process+0x7c>)
 8000302:	6013      	str	r3, [r2, #0]
	green_temp_counter = led_red_duration - led_yellow_duration;
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <red_duration_process+0x7c>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <red_duration_process+0x80>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	4a1b      	ldr	r2, [pc, #108]	; (800037c <red_duration_process+0x84>)
 8000310:	6013      	str	r3, [r2, #0]
	if (green_temp_counter > led_green_duration)
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <red_duration_process+0x84>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <red_duration_process+0x88>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	429a      	cmp	r2, r3
 800031c:	dd04      	ble.n	8000328 <red_duration_process+0x30>
		led_green_duration = green_temp_counter;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <red_duration_process+0x84>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a17      	ldr	r2, [pc, #92]	; (8000380 <red_duration_process+0x88>)
 8000324:	6013      	str	r3, [r2, #0]
		yellow_temp_counter = led_red_duration - led_green_duration;
		if (yellow_temp_counter > led_yellow_duration)
			led_yellow_duration = yellow_temp_counter;
		else led_red_duration = led_green_duration + led_yellow_duration;
	}
}
 8000326:	e01e      	b.n	8000366 <red_duration_process+0x6e>
	else if (green_temp_counter < led_green_duration){
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <red_duration_process+0x84>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <red_duration_process+0x88>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	429a      	cmp	r2, r3
 8000332:	da18      	bge.n	8000366 <red_duration_process+0x6e>
		yellow_temp_counter = led_red_duration - led_green_duration;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <red_duration_process+0x7c>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <red_duration_process+0x88>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	4a11      	ldr	r2, [pc, #68]	; (8000384 <red_duration_process+0x8c>)
 8000340:	6013      	str	r3, [r2, #0]
		if (yellow_temp_counter > led_yellow_duration)
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <red_duration_process+0x8c>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <red_duration_process+0x80>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	429a      	cmp	r2, r3
 800034c:	dd04      	ble.n	8000358 <red_duration_process+0x60>
			led_yellow_duration = yellow_temp_counter;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <red_duration_process+0x8c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a09      	ldr	r2, [pc, #36]	; (8000378 <red_duration_process+0x80>)
 8000354:	6013      	str	r3, [r2, #0]
}
 8000356:	e006      	b.n	8000366 <red_duration_process+0x6e>
		else led_red_duration = led_green_duration + led_yellow_duration;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <red_duration_process+0x88>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <red_duration_process+0x80>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4413      	add	r3, r2
 8000362:	4a04      	ldr	r2, [pc, #16]	; (8000374 <red_duration_process+0x7c>)
 8000364:	6013      	str	r3, [r2, #0]
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	20000064 	.word	0x20000064
 8000374:	20000058 	.word	0x20000058
 8000378:	2000005c 	.word	0x2000005c
 800037c:	20000158 	.word	0x20000158
 8000380:	20000060 	.word	0x20000060
 8000384:	20000160 	.word	0x20000160

08000388 <yellow_duration_process>:

void yellow_duration_process(){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	led_yellow_duration = yellow_counter;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <yellow_duration_process+0x54>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <yellow_duration_process+0x58>)
 8000392:	6013      	str	r3, [r2, #0]
	green_temp_counter = led_red_duration - led_yellow_duration;
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <yellow_duration_process+0x5c>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <yellow_duration_process+0x58>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <yellow_duration_process+0x60>)
 80003a0:	6013      	str	r3, [r2, #0]
	if (green_temp_counter > led_green_duration)
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <yellow_duration_process+0x60>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <yellow_duration_process+0x64>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	dd04      	ble.n	80003b8 <yellow_duration_process+0x30>
		led_green_duration = green_temp_counter;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <yellow_duration_process+0x60>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <yellow_duration_process+0x64>)
 80003b4:	6013      	str	r3, [r2, #0]
	else if (green_temp_counter < led_green_duration)
		led_red_duration = led_yellow_duration + led_green_duration;
}
 80003b6:	e00c      	b.n	80003d2 <yellow_duration_process+0x4a>
	else if (green_temp_counter < led_green_duration)
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <yellow_duration_process+0x60>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <yellow_duration_process+0x64>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	da06      	bge.n	80003d2 <yellow_duration_process+0x4a>
		led_red_duration = led_yellow_duration + led_green_duration;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <yellow_duration_process+0x58>)
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <yellow_duration_process+0x64>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <yellow_duration_process+0x5c>)
 80003d0:	6013      	str	r3, [r2, #0]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000068 	.word	0x20000068
 80003e0:	2000005c 	.word	0x2000005c
 80003e4:	20000058 	.word	0x20000058
 80003e8:	20000158 	.word	0x20000158
 80003ec:	20000060 	.word	0x20000060

080003f0 <green_duration_process>:

void green_duration_process(){
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
	led_green_duration = green_counter;
 80003f4:	4b13      	ldr	r3, [pc, #76]	; (8000444 <green_duration_process+0x54>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a13      	ldr	r2, [pc, #76]	; (8000448 <green_duration_process+0x58>)
 80003fa:	6013      	str	r3, [r2, #0]
	yellow_temp_counter = led_red_duration - led_green_duration;
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <green_duration_process+0x5c>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <green_duration_process+0x58>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	4a12      	ldr	r2, [pc, #72]	; (8000450 <green_duration_process+0x60>)
 8000408:	6013      	str	r3, [r2, #0]
	if (yellow_temp_counter > led_yellow_duration)
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <green_duration_process+0x60>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <green_duration_process+0x64>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	429a      	cmp	r2, r3
 8000414:	dd04      	ble.n	8000420 <green_duration_process+0x30>
		led_yellow_duration = yellow_temp_counter;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <green_duration_process+0x60>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <green_duration_process+0x64>)
 800041c:	6013      	str	r3, [r2, #0]
	else if (yellow_temp_counter < led_yellow_duration)
		led_red_duration = led_yellow_duration + led_green_duration;
}
 800041e:	e00c      	b.n	800043a <green_duration_process+0x4a>
	else if (yellow_temp_counter < led_yellow_duration)
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <green_duration_process+0x60>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <green_duration_process+0x64>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	429a      	cmp	r2, r3
 800042a:	da06      	bge.n	800043a <green_duration_process+0x4a>
		led_red_duration = led_yellow_duration + led_green_duration;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <green_duration_process+0x64>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <green_duration_process+0x58>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4413      	add	r3, r2
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <green_duration_process+0x5c>)
 8000438:	6013      	str	r3, [r2, #0]
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	2000006c 	.word	0x2000006c
 8000448:	20000060 	.word	0x20000060
 800044c:	20000058 	.word	0x20000058
 8000450:	20000160 	.word	0x20000160
 8000454:	2000005c 	.word	0x2000005c

08000458 <fsm_run>:

void fsm_run(){
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	switch(status){
 800045c:	4baf      	ldr	r3, [pc, #700]	; (800071c <fsm_run+0x2c4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3b0a      	subs	r3, #10
 8000462:	2b0d      	cmp	r3, #13
 8000464:	f200 837b 	bhi.w	8000b5e <fsm_run+0x706>
 8000468:	a201      	add	r2, pc, #4	; (adr r2, 8000470 <fsm_run+0x18>)
 800046a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046e:	bf00      	nop
 8000470:	080004a9 	.word	0x080004a9
 8000474:	080004ed 	.word	0x080004ed
 8000478:	080005a7 	.word	0x080005a7
 800047c:	08000661 	.word	0x08000661
 8000480:	08000741 	.word	0x08000741
 8000484:	08000b5f 	.word	0x08000b5f
 8000488:	08000b5f 	.word	0x08000b5f
 800048c:	08000b5f 	.word	0x08000b5f
 8000490:	08000b5f 	.word	0x08000b5f
 8000494:	08000b5f 	.word	0x08000b5f
 8000498:	08000b5f 	.word	0x08000b5f
 800049c:	080007fb 	.word	0x080007fb
 80004a0:	0800090f 	.word	0x0800090f
 80004a4:	08000a4d 	.word	0x08000a4d
		case INIT:
			mode = 1;
 80004a8:	4b9d      	ldr	r3, [pc, #628]	; (8000720 <fsm_run+0x2c8>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_GREEN;
 80004ae:	4b9b      	ldr	r3, [pc, #620]	; (800071c <fsm_run+0x2c4>)
 80004b0:	220b      	movs	r2, #11
 80004b2:	601a      	str	r2, [r3, #0]
			setTimer(1, led_green_duration * 1000);
 80004b4:	4b9b      	ldr	r3, [pc, #620]	; (8000724 <fsm_run+0x2cc>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004bc:	fb02 f303 	mul.w	r3, r2, r3
 80004c0:	4619      	mov	r1, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	f001 f82a 	bl	800151c <setTimer>
			led_clear();
 80004c8:	f001 f920 	bl	800170c <led_clear>
			index_led = 0;
 80004cc:	4b96      	ldr	r3, [pc, #600]	; (8000728 <fsm_run+0x2d0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 80004d2:	21fa      	movs	r1, #250	; 0xfa
 80004d4:	2003      	movs	r0, #3
 80004d6:	f001 f821 	bl	800151c <setTimer>
  			setTimer(4, 1000);
 80004da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004de:	2004      	movs	r0, #4
 80004e0:	f001 f81c 	bl	800151c <setTimer>
			isButtonPressed(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff fe31 	bl	800014c <isButtonPressed>
			break;
 80004ea:	e347      	b.n	8000b7c <fsm_run+0x724>
		case AUTO_RED_GREEN:
			led_control(0, RED);
 80004ec:	2100      	movs	r1, #0
 80004ee:	2000      	movs	r0, #0
 80004f0:	f001 f936 	bl	8001760 <led_control>
			led_control(1, GREEN);
 80004f4:	2102      	movs	r1, #2
 80004f6:	2001      	movs	r0, #1
 80004f8:	f001 f932 	bl	8001760 <led_control>
			led_color_pair[0] = RED;
 80004fc:	4b8b      	ldr	r3, [pc, #556]	; (800072c <fsm_run+0x2d4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
			led_color_pair[1] = GREEN;
 8000502:	4b8a      	ldr	r3, [pc, #552]	; (800072c <fsm_run+0x2d4>)
 8000504:	2202      	movs	r2, #2
 8000506:	605a      	str	r2, [r3, #4]
		    if (isTimerExpired(4) == 1){
 8000508:	2004      	movs	r0, #4
 800050a:	f001 f827 	bl	800155c <isTimerExpired>
 800050e:	4603      	mov	r3, r0
 8000510:	2b01      	cmp	r3, #1
 8000512:	d10e      	bne.n	8000532 <fsm_run+0xda>
		    	red_7seg_counter--;
 8000514:	4b86      	ldr	r3, [pc, #536]	; (8000730 <fsm_run+0x2d8>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a85      	ldr	r2, [pc, #532]	; (8000730 <fsm_run+0x2d8>)
 800051c:	6013      	str	r3, [r2, #0]
		    	green_7seg_counter--;
 800051e:	4b85      	ldr	r3, [pc, #532]	; (8000734 <fsm_run+0x2dc>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	3b01      	subs	r3, #1
 8000524:	4a83      	ldr	r2, [pc, #524]	; (8000734 <fsm_run+0x2dc>)
 8000526:	6013      	str	r3, [r2, #0]
		    	setTimer(4, 1000);
 8000528:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800052c:	2004      	movs	r0, #4
 800052e:	f000 fff5 	bl	800151c <setTimer>
		    }
			if (isTimerExpired(1) == 1){
 8000532:	2001      	movs	r0, #1
 8000534:	f001 f812 	bl	800155c <isTimerExpired>
 8000538:	4603      	mov	r3, r0
 800053a:	2b01      	cmp	r3, #1
 800053c:	d111      	bne.n	8000562 <fsm_run+0x10a>
				reset_7seg_counter();
 800053e:	f000 fd4b 	bl	8000fd8 <reset_7seg_counter>
				status = AUTO_RED_YELLOW;
 8000542:	4b76      	ldr	r3, [pc, #472]	; (800071c <fsm_run+0x2c4>)
 8000544:	220c      	movs	r2, #12
 8000546:	601a      	str	r2, [r3, #0]
				setTimer(1, led_yellow_duration * 1000);
 8000548:	4b7b      	ldr	r3, [pc, #492]	; (8000738 <fsm_run+0x2e0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000550:	fb02 f303 	mul.w	r3, r2, r3
 8000554:	4619      	mov	r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	f000 ffe0 	bl	800151c <setTimer>
				index_led = 0;
 800055c:	4b72      	ldr	r3, [pc, #456]	; (8000728 <fsm_run+0x2d0>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(0) == 1){
 8000562:	2000      	movs	r0, #0
 8000564:	f7ff fdf2 	bl	800014c <isButtonPressed>
 8000568:	4603      	mov	r3, r0
 800056a:	2b01      	cmp	r3, #1
 800056c:	f040 82f9 	bne.w	8000b62 <fsm_run+0x70a>
				led_clear();
 8000570:	f001 f8cc 	bl	800170c <led_clear>
				mode = 2;
 8000574:	4b6a      	ldr	r3, [pc, #424]	; (8000720 <fsm_run+0x2c8>)
 8000576:	2202      	movs	r2, #2
 8000578:	601a      	str	r2, [r3, #0]
				status = MODIFY_RED;
 800057a:	4b68      	ldr	r3, [pc, #416]	; (800071c <fsm_run+0x2c4>)
 800057c:	2215      	movs	r2, #21
 800057e:	601a      	str	r2, [r3, #0]
				setTimer(0, 250);
 8000580:	21fa      	movs	r1, #250	; 0xfa
 8000582:	2000      	movs	r0, #0
 8000584:	f000 ffca 	bl	800151c <setTimer>
				setTimer(2, 5000);
 8000588:	f241 3188 	movw	r1, #5000	; 0x1388
 800058c:	2002      	movs	r0, #2
 800058e:	f000 ffc5 	bl	800151c <setTimer>
				index_led = 0;
 8000592:	4b65      	ldr	r3, [pc, #404]	; (8000728 <fsm_run+0x2d0>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
				isButtonPressed(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff fdd7 	bl	800014c <isButtonPressed>
				isButtonPressed(2);
 800059e:	2002      	movs	r0, #2
 80005a0:	f7ff fdd4 	bl	800014c <isButtonPressed>
			}
			break;
 80005a4:	e2dd      	b.n	8000b62 <fsm_run+0x70a>
		case AUTO_RED_YELLOW:
			led_control(0, RED);
 80005a6:	2100      	movs	r1, #0
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 f8d9 	bl	8001760 <led_control>
			led_control(1, YELLOW);
 80005ae:	2101      	movs	r1, #1
 80005b0:	2001      	movs	r0, #1
 80005b2:	f001 f8d5 	bl	8001760 <led_control>
			led_color_pair[0] = RED;
 80005b6:	4b5d      	ldr	r3, [pc, #372]	; (800072c <fsm_run+0x2d4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
			led_color_pair[1] = YELLOW;
 80005bc:	4b5b      	ldr	r3, [pc, #364]	; (800072c <fsm_run+0x2d4>)
 80005be:	2201      	movs	r2, #1
 80005c0:	605a      	str	r2, [r3, #4]
			if (isTimerExpired(4) == 1){
 80005c2:	2004      	movs	r0, #4
 80005c4:	f000 ffca 	bl	800155c <isTimerExpired>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d10e      	bne.n	80005ec <fsm_run+0x194>
				red_7seg_counter--;
 80005ce:	4b58      	ldr	r3, [pc, #352]	; (8000730 <fsm_run+0x2d8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	4a56      	ldr	r2, [pc, #344]	; (8000730 <fsm_run+0x2d8>)
 80005d6:	6013      	str	r3, [r2, #0]
			    yellow_7seg_counter--;
 80005d8:	4b58      	ldr	r3, [pc, #352]	; (800073c <fsm_run+0x2e4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a57      	ldr	r2, [pc, #348]	; (800073c <fsm_run+0x2e4>)
 80005e0:	6013      	str	r3, [r2, #0]
			    setTimer(4, 1000);
 80005e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e6:	2004      	movs	r0, #4
 80005e8:	f000 ff98 	bl	800151c <setTimer>
			}
			if (isTimerExpired(1) == 1){
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 ffb5 	bl	800155c <isTimerExpired>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d111      	bne.n	800061c <fsm_run+0x1c4>
				reset_7seg_counter();
 80005f8:	f000 fcee 	bl	8000fd8 <reset_7seg_counter>
				status = AUTO_GREEN_RED;
 80005fc:	4b47      	ldr	r3, [pc, #284]	; (800071c <fsm_run+0x2c4>)
 80005fe:	220d      	movs	r2, #13
 8000600:	601a      	str	r2, [r3, #0]
				setTimer(1, led_green_duration * 1000);
 8000602:	4b48      	ldr	r3, [pc, #288]	; (8000724 <fsm_run+0x2cc>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800060a:	fb02 f303 	mul.w	r3, r2, r3
 800060e:	4619      	mov	r1, r3
 8000610:	2001      	movs	r0, #1
 8000612:	f000 ff83 	bl	800151c <setTimer>
				index_led = 0;
 8000616:	4b44      	ldr	r3, [pc, #272]	; (8000728 <fsm_run+0x2d0>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(0) == 1){
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff fd95 	bl	800014c <isButtonPressed>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	f040 829e 	bne.w	8000b66 <fsm_run+0x70e>
				led_clear();
 800062a:	f001 f86f 	bl	800170c <led_clear>
				mode = 2;
 800062e:	4b3c      	ldr	r3, [pc, #240]	; (8000720 <fsm_run+0x2c8>)
 8000630:	2202      	movs	r2, #2
 8000632:	601a      	str	r2, [r3, #0]
				status = MODIFY_RED;
 8000634:	4b39      	ldr	r3, [pc, #228]	; (800071c <fsm_run+0x2c4>)
 8000636:	2215      	movs	r2, #21
 8000638:	601a      	str	r2, [r3, #0]
				setTimer(0, 250);
 800063a:	21fa      	movs	r1, #250	; 0xfa
 800063c:	2000      	movs	r0, #0
 800063e:	f000 ff6d 	bl	800151c <setTimer>
				setTimer(2, 5000);
 8000642:	f241 3188 	movw	r1, #5000	; 0x1388
 8000646:	2002      	movs	r0, #2
 8000648:	f000 ff68 	bl	800151c <setTimer>
				index_led = 0;
 800064c:	4b36      	ldr	r3, [pc, #216]	; (8000728 <fsm_run+0x2d0>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
				isButtonPressed(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff fd7a 	bl	800014c <isButtonPressed>
				isButtonPressed(2);
 8000658:	2002      	movs	r0, #2
 800065a:	f7ff fd77 	bl	800014c <isButtonPressed>
			}
			break;
 800065e:	e282      	b.n	8000b66 <fsm_run+0x70e>
		case AUTO_GREEN_RED:
			led_control(0, GREEN);
 8000660:	2102      	movs	r1, #2
 8000662:	2000      	movs	r0, #0
 8000664:	f001 f87c 	bl	8001760 <led_control>
			led_control(1, RED);
 8000668:	2100      	movs	r1, #0
 800066a:	2001      	movs	r0, #1
 800066c:	f001 f878 	bl	8001760 <led_control>
            led_color_pair[0] = GREEN;
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <fsm_run+0x2d4>)
 8000672:	2202      	movs	r2, #2
 8000674:	601a      	str	r2, [r3, #0]
            led_color_pair[1] = RED;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <fsm_run+0x2d4>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
		    if (isTimerExpired(4) == 1){
 800067c:	2004      	movs	r0, #4
 800067e:	f000 ff6d 	bl	800155c <isTimerExpired>
 8000682:	4603      	mov	r3, r0
 8000684:	2b01      	cmp	r3, #1
 8000686:	d10e      	bne.n	80006a6 <fsm_run+0x24e>
		    	green_7seg_counter--;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <fsm_run+0x2dc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3b01      	subs	r3, #1
 800068e:	4a29      	ldr	r2, [pc, #164]	; (8000734 <fsm_run+0x2dc>)
 8000690:	6013      	str	r3, [r2, #0]
		    	red_7seg_counter--;
 8000692:	4b27      	ldr	r3, [pc, #156]	; (8000730 <fsm_run+0x2d8>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3b01      	subs	r3, #1
 8000698:	4a25      	ldr	r2, [pc, #148]	; (8000730 <fsm_run+0x2d8>)
 800069a:	6013      	str	r3, [r2, #0]
		    	setTimer(4, 1000);
 800069c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006a0:	2004      	movs	r0, #4
 80006a2:	f000 ff3b 	bl	800151c <setTimer>
		    }
			if (isTimerExpired(1) == 1){
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 ff58 	bl	800155c <isTimerExpired>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d111      	bne.n	80006d6 <fsm_run+0x27e>
				reset_7seg_counter();
 80006b2:	f000 fc91 	bl	8000fd8 <reset_7seg_counter>
				status = AUTO_YELLOW_RED;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <fsm_run+0x2c4>)
 80006b8:	220e      	movs	r2, #14
 80006ba:	601a      	str	r2, [r3, #0]
				setTimer(1, led_yellow_duration * 1000);
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <fsm_run+0x2e0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 ff26 	bl	800151c <setTimer>
				index_led = 0;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <fsm_run+0x2d0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(0) == 1){
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff fd38 	bl	800014c <isButtonPressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	f040 8243 	bne.w	8000b6a <fsm_run+0x712>
				led_clear();
 80006e4:	f001 f812 	bl	800170c <led_clear>
				mode = 4;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <fsm_run+0x2c8>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	601a      	str	r2, [r3, #0]
				status = MODIFY_GREEN;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <fsm_run+0x2c4>)
 80006f0:	2217      	movs	r2, #23
 80006f2:	601a      	str	r2, [r3, #0]
				setTimer(0, 250);
 80006f4:	21fa      	movs	r1, #250	; 0xfa
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 ff10 	bl	800151c <setTimer>
				setTimer(2, 5000);
 80006fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8000700:	2002      	movs	r0, #2
 8000702:	f000 ff0b 	bl	800151c <setTimer>
				index_led = 0;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <fsm_run+0x2d0>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
				isButtonPressed(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff fd1d 	bl	800014c <isButtonPressed>
				isButtonPressed(2);
 8000712:	2002      	movs	r0, #2
 8000714:	f7ff fd1a 	bl	800014c <isButtonPressed>
			}
			break;
 8000718:	e227      	b.n	8000b6a <fsm_run+0x712>
 800071a:	bf00      	nop
 800071c:	20000050 	.word	0x20000050
 8000720:	20000054 	.word	0x20000054
 8000724:	20000060 	.word	0x20000060
 8000728:	20000128 	.word	0x20000128
 800072c:	200000a8 	.word	0x200000a8
 8000730:	200000b0 	.word	0x200000b0
 8000734:	200000b8 	.word	0x200000b8
 8000738:	2000005c 	.word	0x2000005c
 800073c:	200000b4 	.word	0x200000b4
		case AUTO_YELLOW_RED:
			led_control(0, YELLOW);
 8000740:	2101      	movs	r1, #1
 8000742:	2000      	movs	r0, #0
 8000744:	f001 f80c 	bl	8001760 <led_control>
			led_control(1, RED);
 8000748:	2100      	movs	r1, #0
 800074a:	2001      	movs	r0, #1
 800074c:	f001 f808 	bl	8001760 <led_control>
            led_color_pair[0] = YELLOW;
 8000750:	4bb4      	ldr	r3, [pc, #720]	; (8000a24 <fsm_run+0x5cc>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
            led_color_pair[1] = RED;
 8000756:	4bb3      	ldr	r3, [pc, #716]	; (8000a24 <fsm_run+0x5cc>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
		    if (isTimerExpired(4) == 1){
 800075c:	2004      	movs	r0, #4
 800075e:	f000 fefd 	bl	800155c <isTimerExpired>
 8000762:	4603      	mov	r3, r0
 8000764:	2b01      	cmp	r3, #1
 8000766:	d10e      	bne.n	8000786 <fsm_run+0x32e>
		    	yellow_7seg_counter--;
 8000768:	4baf      	ldr	r3, [pc, #700]	; (8000a28 <fsm_run+0x5d0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4aae      	ldr	r2, [pc, #696]	; (8000a28 <fsm_run+0x5d0>)
 8000770:	6013      	str	r3, [r2, #0]
		    	red_7seg_counter--;
 8000772:	4bae      	ldr	r3, [pc, #696]	; (8000a2c <fsm_run+0x5d4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3b01      	subs	r3, #1
 8000778:	4aac      	ldr	r2, [pc, #688]	; (8000a2c <fsm_run+0x5d4>)
 800077a:	6013      	str	r3, [r2, #0]
		    	setTimer(4, 1000);
 800077c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000780:	2004      	movs	r0, #4
 8000782:	f000 fecb 	bl	800151c <setTimer>
		    }
			if (isTimerExpired(1) == 1){
 8000786:	2001      	movs	r0, #1
 8000788:	f000 fee8 	bl	800155c <isTimerExpired>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d111      	bne.n	80007b6 <fsm_run+0x35e>
				reset_7seg_counter();
 8000792:	f000 fc21 	bl	8000fd8 <reset_7seg_counter>
				status = AUTO_RED_GREEN;
 8000796:	4ba6      	ldr	r3, [pc, #664]	; (8000a30 <fsm_run+0x5d8>)
 8000798:	220b      	movs	r2, #11
 800079a:	601a      	str	r2, [r3, #0]
				setTimer(1, led_green_duration * 1000);
 800079c:	4ba5      	ldr	r3, [pc, #660]	; (8000a34 <fsm_run+0x5dc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a4:	fb02 f303 	mul.w	r3, r2, r3
 80007a8:	4619      	mov	r1, r3
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 feb6 	bl	800151c <setTimer>
				index_led = 0;
 80007b0:	4ba1      	ldr	r3, [pc, #644]	; (8000a38 <fsm_run+0x5e0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(0) == 1){
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fcc8 	bl	800014c <isButtonPressed>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b01      	cmp	r3, #1
 80007c0:	f040 81d5 	bne.w	8000b6e <fsm_run+0x716>
				led_clear();
 80007c4:	f000 ffa2 	bl	800170c <led_clear>
				mode = 3;
 80007c8:	4b9c      	ldr	r3, [pc, #624]	; (8000a3c <fsm_run+0x5e4>)
 80007ca:	2203      	movs	r2, #3
 80007cc:	601a      	str	r2, [r3, #0]
				status = MODIFY_YELLOW;
 80007ce:	4b98      	ldr	r3, [pc, #608]	; (8000a30 <fsm_run+0x5d8>)
 80007d0:	2216      	movs	r2, #22
 80007d2:	601a      	str	r2, [r3, #0]
				setTimer(0, 250);
 80007d4:	21fa      	movs	r1, #250	; 0xfa
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 fea0 	bl	800151c <setTimer>
				setTimer(2, 5000);
 80007dc:	f241 3188 	movw	r1, #5000	; 0x1388
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 fe9b 	bl	800151c <setTimer>
				index_led = 0;
 80007e6:	4b94      	ldr	r3, [pc, #592]	; (8000a38 <fsm_run+0x5e0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
				isButtonPressed(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff fcad 	bl	800014c <isButtonPressed>
				isButtonPressed(2);
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff fcaa 	bl	800014c <isButtonPressed>
			}
			break;
 80007f8:	e1b9      	b.n	8000b6e <fsm_run+0x716>

		case MODIFY_RED:
			if (isTimerExpired(0) == 1){
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 feae 	bl	800155c <isTimerExpired>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d106      	bne.n	8000814 <fsm_run+0x3bc>
				led_blinking(RED);
 8000806:	2000      	movs	r0, #0
 8000808:	f001 f812 	bl	8001830 <led_blinking>
				setTimer(0, 250);
 800080c:	21fa      	movs	r1, #250	; 0xfa
 800080e:	2000      	movs	r0, #0
 8000810:	f000 fe84 	bl	800151c <setTimer>
			}
			if (isTimerExpired(2) == 1){
 8000814:	2002      	movs	r0, #2
 8000816:	f000 fea1 	bl	800155c <isTimerExpired>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d119      	bne.n	8000854 <fsm_run+0x3fc>
				update_7seg_counter();
 8000820:	f000 fc04 	bl	800102c <update_7seg_counter>
				setTimer(4, 1000);
 8000824:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000828:	2004      	movs	r0, #4
 800082a:	f000 fe77 	bl	800151c <setTimer>
				mode = 1;
 800082e:	4b83      	ldr	r3, [pc, #524]	; (8000a3c <fsm_run+0x5e4>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
				status = AUTO_RED_GREEN;
 8000834:	4b7e      	ldr	r3, [pc, #504]	; (8000a30 <fsm_run+0x5d8>)
 8000836:	220b      	movs	r2, #11
 8000838:	601a      	str	r2, [r3, #0]
				setTimer(1, led_green_duration * 1000);
 800083a:	4b7e      	ldr	r3, [pc, #504]	; (8000a34 <fsm_run+0x5dc>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	4619      	mov	r1, r3
 8000848:	2001      	movs	r0, #1
 800084a:	f000 fe67 	bl	800151c <setTimer>
				index_led = 0;
 800084e:	4b7a      	ldr	r3, [pc, #488]	; (8000a38 <fsm_run+0x5e0>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(0) == 1){
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fc79 	bl	800014c <isButtonPressed>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d119      	bne.n	8000894 <fsm_run+0x43c>
				led_clear();
 8000860:	f000 ff54 	bl	800170c <led_clear>
				mode = 3;
 8000864:	4b75      	ldr	r3, [pc, #468]	; (8000a3c <fsm_run+0x5e4>)
 8000866:	2203      	movs	r2, #3
 8000868:	601a      	str	r2, [r3, #0]
				status = MODIFY_YELLOW;
 800086a:	4b71      	ldr	r3, [pc, #452]	; (8000a30 <fsm_run+0x5d8>)
 800086c:	2216      	movs	r2, #22
 800086e:	601a      	str	r2, [r3, #0]
				setTimer(0, 250);
 8000870:	21fa      	movs	r1, #250	; 0xfa
 8000872:	2000      	movs	r0, #0
 8000874:	f000 fe52 	bl	800151c <setTimer>
				setTimer(2, 5000);
 8000878:	f241 3188 	movw	r1, #5000	; 0x1388
 800087c:	2002      	movs	r0, #2
 800087e:	f000 fe4d 	bl	800151c <setTimer>
				index_led = 0;
 8000882:	4b6d      	ldr	r3, [pc, #436]	; (8000a38 <fsm_run+0x5e0>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
				isButtonPressed(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fc5f 	bl	800014c <isButtonPressed>
				isButtonPressed(2);
 800088e:	2002      	movs	r0, #2
 8000890:	f7ff fc5c 	bl	800014c <isButtonPressed>
			}
			if (isButtonPressed(1) == 1){
 8000894:	2001      	movs	r0, #1
 8000896:	f7ff fc59 	bl	800014c <isButtonPressed>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d110      	bne.n	80008c2 <fsm_run+0x46a>
				red_counter++;
 80008a0:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <fsm_run+0x5e8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a66      	ldr	r2, [pc, #408]	; (8000a40 <fsm_run+0x5e8>)
 80008a8:	6013      	str	r3, [r2, #0]
				if (red_counter > 99) red_counter = 5;
 80008aa:	4b65      	ldr	r3, [pc, #404]	; (8000a40 <fsm_run+0x5e8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b63      	cmp	r3, #99	; 0x63
 80008b0:	dd02      	ble.n	80008b8 <fsm_run+0x460>
 80008b2:	4b63      	ldr	r3, [pc, #396]	; (8000a40 <fsm_run+0x5e8>)
 80008b4:	2205      	movs	r2, #5
 80008b6:	601a      	str	r2, [r3, #0]
				setTimer(2, 5000);
 80008b8:	f241 3188 	movw	r1, #5000	; 0x1388
 80008bc:	2002      	movs	r0, #2
 80008be:	f000 fe2d 	bl	800151c <setTimer>
			}
			if (isButtonPressed(2) == 1){
 80008c2:	2002      	movs	r0, #2
 80008c4:	f7ff fc42 	bl	800014c <isButtonPressed>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	f040 8151 	bne.w	8000b72 <fsm_run+0x71a>
				red_duration_process();
 80008d0:	f7ff fd12 	bl	80002f8 <red_duration_process>
				update_led_counter();
 80008d4:	f7ff fcf2 	bl	80002bc <update_led_counter>
				update_7seg_counter();
 80008d8:	f000 fba8 	bl	800102c <update_7seg_counter>
				setTimer(4, 1000);
 80008dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e0:	2004      	movs	r0, #4
 80008e2:	f000 fe1b 	bl	800151c <setTimer>
				mode = 1;
 80008e6:	4b55      	ldr	r3, [pc, #340]	; (8000a3c <fsm_run+0x5e4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	601a      	str	r2, [r3, #0]
				status = AUTO_RED_GREEN;
 80008ec:	4b50      	ldr	r3, [pc, #320]	; (8000a30 <fsm_run+0x5d8>)
 80008ee:	220b      	movs	r2, #11
 80008f0:	601a      	str	r2, [r3, #0]
				setTimer(1, led_green_duration * 1000);
 80008f2:	4b50      	ldr	r3, [pc, #320]	; (8000a34 <fsm_run+0x5dc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008fa:	fb02 f303 	mul.w	r3, r2, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	2001      	movs	r0, #1
 8000902:	f000 fe0b 	bl	800151c <setTimer>
				index_led = 0;
 8000906:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <fsm_run+0x5e0>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
			}
			break;
 800090c:	e131      	b.n	8000b72 <fsm_run+0x71a>
		case MODIFY_YELLOW:
			if (isTimerExpired(0) == 1){
 800090e:	2000      	movs	r0, #0
 8000910:	f000 fe24 	bl	800155c <isTimerExpired>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d106      	bne.n	8000928 <fsm_run+0x4d0>
				led_blinking(YELLOW);
 800091a:	2001      	movs	r0, #1
 800091c:	f000 ff88 	bl	8001830 <led_blinking>
				setTimer(0, 250);
 8000920:	21fa      	movs	r1, #250	; 0xfa
 8000922:	2000      	movs	r0, #0
 8000924:	f000 fdfa 	bl	800151c <setTimer>
			}
			if (isTimerExpired(2) == 1){
 8000928:	2002      	movs	r0, #2
 800092a:	f000 fe17 	bl	800155c <isTimerExpired>
 800092e:	4603      	mov	r3, r0
 8000930:	2b01      	cmp	r3, #1
 8000932:	d119      	bne.n	8000968 <fsm_run+0x510>
				update_7seg_counter();
 8000934:	f000 fb7a 	bl	800102c <update_7seg_counter>
				setTimer(4, 1000);
 8000938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800093c:	2004      	movs	r0, #4
 800093e:	f000 fded 	bl	800151c <setTimer>
				mode = 1;
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <fsm_run+0x5e4>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
				status = AUTO_YELLOW_RED;
 8000948:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <fsm_run+0x5d8>)
 800094a:	220e      	movs	r2, #14
 800094c:	601a      	str	r2, [r3, #0]
				setTimer(1, led_yellow_duration * 1000);
 800094e:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <fsm_run+0x5ec>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000956:	fb02 f303 	mul.w	r3, r2, r3
 800095a:	4619      	mov	r1, r3
 800095c:	2001      	movs	r0, #1
 800095e:	f000 fddd 	bl	800151c <setTimer>
				index_led = 0;
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <fsm_run+0x5e0>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(0) == 1){
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff fbef 	bl	800014c <isButtonPressed>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d119      	bne.n	80009a8 <fsm_run+0x550>
				led_clear();
 8000974:	f000 feca 	bl	800170c <led_clear>
				mode = 4;
 8000978:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <fsm_run+0x5e4>)
 800097a:	2204      	movs	r2, #4
 800097c:	601a      	str	r2, [r3, #0]
				status = MODIFY_GREEN;
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <fsm_run+0x5d8>)
 8000980:	2217      	movs	r2, #23
 8000982:	601a      	str	r2, [r3, #0]
				setTimer(0, 250);
 8000984:	21fa      	movs	r1, #250	; 0xfa
 8000986:	2000      	movs	r0, #0
 8000988:	f000 fdc8 	bl	800151c <setTimer>
				setTimer(2, 5000);
 800098c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000990:	2002      	movs	r0, #2
 8000992:	f000 fdc3 	bl	800151c <setTimer>
				index_led = 0;
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <fsm_run+0x5e0>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
				isButtonPressed(1);
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff fbd5 	bl	800014c <isButtonPressed>
				isButtonPressed(2);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff fbd2 	bl	800014c <isButtonPressed>
			}
			if (isButtonPressed(1) == 1){
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fbcf 	bl	800014c <isButtonPressed>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d110      	bne.n	80009d6 <fsm_run+0x57e>
				yellow_counter++;
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <fsm_run+0x5f0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <fsm_run+0x5f0>)
 80009bc:	6013      	str	r3, [r2, #0]
				if (yellow_counter > 99) yellow_counter = 3;
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <fsm_run+0x5f0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b63      	cmp	r3, #99	; 0x63
 80009c4:	dd02      	ble.n	80009cc <fsm_run+0x574>
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <fsm_run+0x5f0>)
 80009c8:	2203      	movs	r2, #3
 80009ca:	601a      	str	r2, [r3, #0]
				setTimer(2, 5000);
 80009cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80009d0:	2002      	movs	r0, #2
 80009d2:	f000 fda3 	bl	800151c <setTimer>
			}
			if (isButtonPressed(2) == 1){
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff fbb8 	bl	800014c <isButtonPressed>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	f040 80c9 	bne.w	8000b76 <fsm_run+0x71e>
				yellow_duration_process();
 80009e4:	f7ff fcd0 	bl	8000388 <yellow_duration_process>
				update_led_counter();
 80009e8:	f7ff fc68 	bl	80002bc <update_led_counter>
				update_7seg_counter();
 80009ec:	f000 fb1e 	bl	800102c <update_7seg_counter>
				setTimer(4, 1000);
 80009f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f4:	2004      	movs	r0, #4
 80009f6:	f000 fd91 	bl	800151c <setTimer>
				mode = 1;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <fsm_run+0x5e4>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
				status = AUTO_YELLOW_RED;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <fsm_run+0x5d8>)
 8000a02:	220e      	movs	r2, #14
 8000a04:	601a      	str	r2, [r3, #0]
				setTimer(1, led_yellow_duration * 1000);
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <fsm_run+0x5ec>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 fd81 	bl	800151c <setTimer>
				index_led = 0;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <fsm_run+0x5e0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a20:	e0a9      	b.n	8000b76 <fsm_run+0x71e>
 8000a22:	bf00      	nop
 8000a24:	200000a8 	.word	0x200000a8
 8000a28:	200000b4 	.word	0x200000b4
 8000a2c:	200000b0 	.word	0x200000b0
 8000a30:	20000050 	.word	0x20000050
 8000a34:	20000060 	.word	0x20000060
 8000a38:	20000128 	.word	0x20000128
 8000a3c:	20000054 	.word	0x20000054
 8000a40:	20000064 	.word	0x20000064
 8000a44:	2000005c 	.word	0x2000005c
 8000a48:	20000068 	.word	0x20000068
		case MODIFY_GREEN:
			if (isTimerExpired(0) == 1){
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fd85 	bl	800155c <isTimerExpired>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d106      	bne.n	8000a66 <fsm_run+0x60e>
				led_blinking(GREEN);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f000 fee9 	bl	8001830 <led_blinking>
				setTimer(0, 250);
 8000a5e:	21fa      	movs	r1, #250	; 0xfa
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fd5b 	bl	800151c <setTimer>
			}
			if (isTimerExpired(2) == 1){
 8000a66:	2002      	movs	r0, #2
 8000a68:	f000 fd78 	bl	800155c <isTimerExpired>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d119      	bne.n	8000aa6 <fsm_run+0x64e>
				update_7seg_counter();
 8000a72:	f000 fadb 	bl	800102c <update_7seg_counter>
				setTimer(4, 1000);
 8000a76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f000 fd4e 	bl	800151c <setTimer>
				mode = 1;
 8000a80:	4b3f      	ldr	r3, [pc, #252]	; (8000b80 <fsm_run+0x728>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN_RED;
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <fsm_run+0x72c>)
 8000a88:	220d      	movs	r2, #13
 8000a8a:	601a      	str	r2, [r3, #0]
				setTimer(1, led_green_duration * 1000);
 8000a8c:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <fsm_run+0x730>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a94:	fb02 f303 	mul.w	r3, r2, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 fd3e 	bl	800151c <setTimer>
				index_led = 0;
 8000aa0:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <fsm_run+0x734>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(0) == 1){
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fb50 	bl	800014c <isButtonPressed>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d119      	bne.n	8000ae6 <fsm_run+0x68e>
				led_clear();
 8000ab2:	f000 fe2b 	bl	800170c <led_clear>
				mode = 2;
 8000ab6:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <fsm_run+0x728>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	601a      	str	r2, [r3, #0]
				status = MODIFY_RED;
 8000abc:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <fsm_run+0x72c>)
 8000abe:	2215      	movs	r2, #21
 8000ac0:	601a      	str	r2, [r3, #0]
				setTimer(0, 250);
 8000ac2:	21fa      	movs	r1, #250	; 0xfa
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 fd29 	bl	800151c <setTimer>
				setTimer(2, 5000);
 8000aca:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f000 fd24 	bl	800151c <setTimer>
				index_led = 0;
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <fsm_run+0x734>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
				isButtonPressed(1);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fb36 	bl	800014c <isButtonPressed>
				isButtonPressed(2);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f7ff fb33 	bl	800014c <isButtonPressed>
			}
			if (isButtonPressed(1) == 1){
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fb30 	bl	800014c <isButtonPressed>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d110      	bne.n	8000b14 <fsm_run+0x6bc>
				green_counter++;
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <fsm_run+0x738>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <fsm_run+0x738>)
 8000afa:	6013      	str	r3, [r2, #0]
				if (green_counter > 99) green_counter = 2;
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <fsm_run+0x738>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b63      	cmp	r3, #99	; 0x63
 8000b02:	dd02      	ble.n	8000b0a <fsm_run+0x6b2>
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <fsm_run+0x738>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	601a      	str	r2, [r3, #0]
				setTimer(2, 5000);
 8000b0a:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f000 fd04 	bl	800151c <setTimer>
			}
			if (isButtonPressed(2) == 1){
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff fb19 	bl	800014c <isButtonPressed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d12c      	bne.n	8000b7a <fsm_run+0x722>
				green_duration_process();
 8000b20:	f7ff fc66 	bl	80003f0 <green_duration_process>
				update_led_counter();
 8000b24:	f7ff fbca 	bl	80002bc <update_led_counter>
				update_7seg_counter();
 8000b28:	f000 fa80 	bl	800102c <update_7seg_counter>
				setTimer(4, 1000);
 8000b2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b30:	2004      	movs	r0, #4
 8000b32:	f000 fcf3 	bl	800151c <setTimer>
				mode = 1;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <fsm_run+0x728>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN_RED;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <fsm_run+0x72c>)
 8000b3e:	220d      	movs	r2, #13
 8000b40:	601a      	str	r2, [r3, #0]
				setTimer(1, led_green_duration * 1000);
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <fsm_run+0x730>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b4a:	fb02 f303 	mul.w	r3, r2, r3
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	f000 fce3 	bl	800151c <setTimer>
				index_led = 0;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <fsm_run+0x734>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b5c:	e00d      	b.n	8000b7a <fsm_run+0x722>
		default:
			break;
 8000b5e:	bf00      	nop
 8000b60:	e00c      	b.n	8000b7c <fsm_run+0x724>
			break;
 8000b62:	bf00      	nop
 8000b64:	e00a      	b.n	8000b7c <fsm_run+0x724>
			break;
 8000b66:	bf00      	nop
 8000b68:	e008      	b.n	8000b7c <fsm_run+0x724>
			break;
 8000b6a:	bf00      	nop
 8000b6c:	e006      	b.n	8000b7c <fsm_run+0x724>
			break;
 8000b6e:	bf00      	nop
 8000b70:	e004      	b.n	8000b7c <fsm_run+0x724>
			break;
 8000b72:	bf00      	nop
 8000b74:	e002      	b.n	8000b7c <fsm_run+0x724>
			break;
 8000b76:	bf00      	nop
 8000b78:	e000      	b.n	8000b7c <fsm_run+0x724>
			break;
 8000b7a:	bf00      	nop
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000054 	.word	0x20000054
 8000b84:	20000050 	.word	0x20000050
 8000b88:	20000060 	.word	0x20000060
 8000b8c:	20000128 	.word	0x20000128
 8000b90:	2000006c 	.word	0x2000006c

08000b94 <init_traffic>:
int red_7seg_counter = 5;
int yellow_7seg_counter = 3;
int green_7seg_counter = 2;


void init_traffic(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_R_GPIO_Port, LED1_R_Pin);
 8000b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <init_traffic+0x44>)
 8000b9e:	f001 f9ac 	bl	8001efa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED1_Y_GPIO_Port, LED1_Y_Pin);
 8000ba2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <init_traffic+0x44>)
 8000ba8:	f001 f9a7 	bl	8001efa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED1_G_GPIO_Port, LED1_G_Pin);
 8000bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <init_traffic+0x44>)
 8000bb2:	f001 f9a2 	bl	8001efa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_R_GPIO_Port, LED2_R_Pin);
 8000bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <init_traffic+0x44>)
 8000bbc:	f001 f99d 	bl	8001efa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_Y_GPIO_Port, LED2_Y_Pin);
 8000bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <init_traffic+0x44>)
 8000bc6:	f001 f998 	bl	8001efa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_G_GPIO_Port, LED2_G_Pin);
 8000bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bce:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <init_traffic+0x44>)
 8000bd0:	f001 f993 	bl	8001efa <HAL_GPIO_TogglePin>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <display7SEG>:

#include "led_7seg.h"


void display7SEG(int num){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b09      	cmp	r3, #9
 8000be8:	f200 8180 	bhi.w	8000eec <display7SEG+0x310>
 8000bec:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <display7SEG+0x18>)
 8000bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf2:	bf00      	nop
 8000bf4:	08000c1d 	.word	0x08000c1d
 8000bf8:	08000c65 	.word	0x08000c65
 8000bfc:	08000cad 	.word	0x08000cad
 8000c00:	08000cf5 	.word	0x08000cf5
 8000c04:	08000d3d 	.word	0x08000d3d
 8000c08:	08000d85 	.word	0x08000d85
 8000c0c:	08000dcd 	.word	0x08000dcd
 8000c10:	08000e15 	.word	0x08000e15
 8000c14:	08000e5d 	.word	0x08000e5d
 8000c18:	08000ea5 	.word	0x08000ea5
	switch(num){
		case 0:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	48b5      	ldr	r0, [pc, #724]	; (8000ef8 <display7SEG+0x31c>)
 8000c22:	f001 f952 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2102      	movs	r1, #2
 8000c2a:	48b3      	ldr	r0, [pc, #716]	; (8000ef8 <display7SEG+0x31c>)
 8000c2c:	f001 f94d 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2104      	movs	r1, #4
 8000c34:	48b0      	ldr	r0, [pc, #704]	; (8000ef8 <display7SEG+0x31c>)
 8000c36:	f001 f948 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	48ae      	ldr	r0, [pc, #696]	; (8000ef8 <display7SEG+0x31c>)
 8000c40:	f001 f943 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2110      	movs	r1, #16
 8000c48:	48ab      	ldr	r0, [pc, #684]	; (8000ef8 <display7SEG+0x31c>)
 8000c4a:	f001 f93e 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2120      	movs	r1, #32
 8000c52:	48a9      	ldr	r0, [pc, #676]	; (8000ef8 <display7SEG+0x31c>)
 8000c54:	f001 f939 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2140      	movs	r1, #64	; 0x40
 8000c5c:	48a6      	ldr	r0, [pc, #664]	; (8000ef8 <display7SEG+0x31c>)
 8000c5e:	f001 f934 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000c62:	e144      	b.n	8000eee <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2101      	movs	r1, #1
 8000c68:	48a3      	ldr	r0, [pc, #652]	; (8000ef8 <display7SEG+0x31c>)
 8000c6a:	f001 f92e 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2102      	movs	r1, #2
 8000c72:	48a1      	ldr	r0, [pc, #644]	; (8000ef8 <display7SEG+0x31c>)
 8000c74:	f001 f929 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	489e      	ldr	r0, [pc, #632]	; (8000ef8 <display7SEG+0x31c>)
 8000c7e:	f001 f924 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2108      	movs	r1, #8
 8000c86:	489c      	ldr	r0, [pc, #624]	; (8000ef8 <display7SEG+0x31c>)
 8000c88:	f001 f91f 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4899      	ldr	r0, [pc, #612]	; (8000ef8 <display7SEG+0x31c>)
 8000c92:	f001 f91a 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4897      	ldr	r0, [pc, #604]	; (8000ef8 <display7SEG+0x31c>)
 8000c9c:	f001 f915 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2140      	movs	r1, #64	; 0x40
 8000ca4:	4894      	ldr	r0, [pc, #592]	; (8000ef8 <display7SEG+0x31c>)
 8000ca6:	f001 f910 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000caa:	e120      	b.n	8000eee <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4891      	ldr	r0, [pc, #580]	; (8000ef8 <display7SEG+0x31c>)
 8000cb2:	f001 f90a 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2102      	movs	r1, #2
 8000cba:	488f      	ldr	r0, [pc, #572]	; (8000ef8 <display7SEG+0x31c>)
 8000cbc:	f001 f905 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	488c      	ldr	r0, [pc, #560]	; (8000ef8 <display7SEG+0x31c>)
 8000cc6:	f001 f900 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2108      	movs	r1, #8
 8000cce:	488a      	ldr	r0, [pc, #552]	; (8000ef8 <display7SEG+0x31c>)
 8000cd0:	f001 f8fb 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	4887      	ldr	r0, [pc, #540]	; (8000ef8 <display7SEG+0x31c>)
 8000cda:	f001 f8f6 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	4885      	ldr	r0, [pc, #532]	; (8000ef8 <display7SEG+0x31c>)
 8000ce4:	f001 f8f1 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2140      	movs	r1, #64	; 0x40
 8000cec:	4882      	ldr	r0, [pc, #520]	; (8000ef8 <display7SEG+0x31c>)
 8000cee:	f001 f8ec 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000cf2:	e0fc      	b.n	8000eee <display7SEG+0x312>
		case 3:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	487f      	ldr	r0, [pc, #508]	; (8000ef8 <display7SEG+0x31c>)
 8000cfa:	f001 f8e6 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2102      	movs	r1, #2
 8000d02:	487d      	ldr	r0, [pc, #500]	; (8000ef8 <display7SEG+0x31c>)
 8000d04:	f001 f8e1 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	487a      	ldr	r0, [pc, #488]	; (8000ef8 <display7SEG+0x31c>)
 8000d0e:	f001 f8dc 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2108      	movs	r1, #8
 8000d16:	4878      	ldr	r0, [pc, #480]	; (8000ef8 <display7SEG+0x31c>)
 8000d18:	f001 f8d7 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4875      	ldr	r0, [pc, #468]	; (8000ef8 <display7SEG+0x31c>)
 8000d22:	f001 f8d2 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2120      	movs	r1, #32
 8000d2a:	4873      	ldr	r0, [pc, #460]	; (8000ef8 <display7SEG+0x31c>)
 8000d2c:	f001 f8cd 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2140      	movs	r1, #64	; 0x40
 8000d34:	4870      	ldr	r0, [pc, #448]	; (8000ef8 <display7SEG+0x31c>)
 8000d36:	f001 f8c8 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000d3a:	e0d8      	b.n	8000eee <display7SEG+0x312>
		case 4:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2101      	movs	r1, #1
 8000d40:	486d      	ldr	r0, [pc, #436]	; (8000ef8 <display7SEG+0x31c>)
 8000d42:	f001 f8c2 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2102      	movs	r1, #2
 8000d4a:	486b      	ldr	r0, [pc, #428]	; (8000ef8 <display7SEG+0x31c>)
 8000d4c:	f001 f8bd 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2104      	movs	r1, #4
 8000d54:	4868      	ldr	r0, [pc, #416]	; (8000ef8 <display7SEG+0x31c>)
 8000d56:	f001 f8b8 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	4866      	ldr	r0, [pc, #408]	; (8000ef8 <display7SEG+0x31c>)
 8000d60:	f001 f8b3 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2110      	movs	r1, #16
 8000d68:	4863      	ldr	r0, [pc, #396]	; (8000ef8 <display7SEG+0x31c>)
 8000d6a:	f001 f8ae 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2120      	movs	r1, #32
 8000d72:	4861      	ldr	r0, [pc, #388]	; (8000ef8 <display7SEG+0x31c>)
 8000d74:	f001 f8a9 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	485e      	ldr	r0, [pc, #376]	; (8000ef8 <display7SEG+0x31c>)
 8000d7e:	f001 f8a4 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000d82:	e0b4      	b.n	8000eee <display7SEG+0x312>
		case 5:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2101      	movs	r1, #1
 8000d88:	485b      	ldr	r0, [pc, #364]	; (8000ef8 <display7SEG+0x31c>)
 8000d8a:	f001 f89e 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2102      	movs	r1, #2
 8000d92:	4859      	ldr	r0, [pc, #356]	; (8000ef8 <display7SEG+0x31c>)
 8000d94:	f001 f899 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4856      	ldr	r0, [pc, #344]	; (8000ef8 <display7SEG+0x31c>)
 8000d9e:	f001 f894 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2108      	movs	r1, #8
 8000da6:	4854      	ldr	r0, [pc, #336]	; (8000ef8 <display7SEG+0x31c>)
 8000da8:	f001 f88f 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2110      	movs	r1, #16
 8000db0:	4851      	ldr	r0, [pc, #324]	; (8000ef8 <display7SEG+0x31c>)
 8000db2:	f001 f88a 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2120      	movs	r1, #32
 8000dba:	484f      	ldr	r0, [pc, #316]	; (8000ef8 <display7SEG+0x31c>)
 8000dbc:	f001 f885 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	484c      	ldr	r0, [pc, #304]	; (8000ef8 <display7SEG+0x31c>)
 8000dc6:	f001 f880 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000dca:	e090      	b.n	8000eee <display7SEG+0x312>
		case 6:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <display7SEG+0x31c>)
 8000dd2:	f001 f87a 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4847      	ldr	r0, [pc, #284]	; (8000ef8 <display7SEG+0x31c>)
 8000ddc:	f001 f875 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2104      	movs	r1, #4
 8000de4:	4844      	ldr	r0, [pc, #272]	; (8000ef8 <display7SEG+0x31c>)
 8000de6:	f001 f870 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2108      	movs	r1, #8
 8000dee:	4842      	ldr	r0, [pc, #264]	; (8000ef8 <display7SEG+0x31c>)
 8000df0:	f001 f86b 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2110      	movs	r1, #16
 8000df8:	483f      	ldr	r0, [pc, #252]	; (8000ef8 <display7SEG+0x31c>)
 8000dfa:	f001 f866 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2120      	movs	r1, #32
 8000e02:	483d      	ldr	r0, [pc, #244]	; (8000ef8 <display7SEG+0x31c>)
 8000e04:	f001 f861 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	483a      	ldr	r0, [pc, #232]	; (8000ef8 <display7SEG+0x31c>)
 8000e0e:	f001 f85c 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000e12:	e06c      	b.n	8000eee <display7SEG+0x312>
		case 7:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2101      	movs	r1, #1
 8000e18:	4837      	ldr	r0, [pc, #220]	; (8000ef8 <display7SEG+0x31c>)
 8000e1a:	f001 f856 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2102      	movs	r1, #2
 8000e22:	4835      	ldr	r0, [pc, #212]	; (8000ef8 <display7SEG+0x31c>)
 8000e24:	f001 f851 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4832      	ldr	r0, [pc, #200]	; (8000ef8 <display7SEG+0x31c>)
 8000e2e:	f001 f84c 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2108      	movs	r1, #8
 8000e36:	4830      	ldr	r0, [pc, #192]	; (8000ef8 <display7SEG+0x31c>)
 8000e38:	f001 f847 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2110      	movs	r1, #16
 8000e40:	482d      	ldr	r0, [pc, #180]	; (8000ef8 <display7SEG+0x31c>)
 8000e42:	f001 f842 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2120      	movs	r1, #32
 8000e4a:	482b      	ldr	r0, [pc, #172]	; (8000ef8 <display7SEG+0x31c>)
 8000e4c:	f001 f83d 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	4828      	ldr	r0, [pc, #160]	; (8000ef8 <display7SEG+0x31c>)
 8000e56:	f001 f838 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000e5a:	e048      	b.n	8000eee <display7SEG+0x312>
		case 8:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4825      	ldr	r0, [pc, #148]	; (8000ef8 <display7SEG+0x31c>)
 8000e62:	f001 f832 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <display7SEG+0x31c>)
 8000e6c:	f001 f82d 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2104      	movs	r1, #4
 8000e74:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <display7SEG+0x31c>)
 8000e76:	f001 f828 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <display7SEG+0x31c>)
 8000e80:	f001 f823 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	481b      	ldr	r0, [pc, #108]	; (8000ef8 <display7SEG+0x31c>)
 8000e8a:	f001 f81e 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2120      	movs	r1, #32
 8000e92:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <display7SEG+0x31c>)
 8000e94:	f001 f819 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2140      	movs	r1, #64	; 0x40
 8000e9c:	4816      	ldr	r0, [pc, #88]	; (8000ef8 <display7SEG+0x31c>)
 8000e9e:	f001 f814 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000ea2:	e024      	b.n	8000eee <display7SEG+0x312>
		case 9:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <display7SEG+0x31c>)
 8000eaa:	f001 f80e 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <display7SEG+0x31c>)
 8000eb4:	f001 f809 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2104      	movs	r1, #4
 8000ebc:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <display7SEG+0x31c>)
 8000ebe:	f001 f804 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <display7SEG+0x31c>)
 8000ec8:	f000 ffff 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2110      	movs	r1, #16
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <display7SEG+0x31c>)
 8000ed2:	f000 fffa 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2120      	movs	r1, #32
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <display7SEG+0x31c>)
 8000edc:	f000 fff5 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2140      	movs	r1, #64	; 0x40
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <display7SEG+0x31c>)
 8000ee6:	f000 fff0 	bl	8001eca <HAL_GPIO_WritePin>
			break;
 8000eea:	e000      	b.n	8000eee <display7SEG+0x312>
		default:
			break;
 8000eec:	bf00      	nop
	}
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40010c00 	.word	0x40010c00

08000efc <update7SEG>:

void update7SEG(int index) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d85e      	bhi.n	8000fc8 <update7SEG+0xcc>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <update7SEG+0x14>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f21 	.word	0x08000f21
 8000f14:	08000f4b 	.word	0x08000f4b
 8000f18:	08000f75 	.word	0x08000f75
 8000f1c:	08000f9f 	.word	0x08000f9f
    switch(index){
        case 0:
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2102      	movs	r1, #2
 8000f24:	482b      	ldr	r0, [pc, #172]	; (8000fd4 <update7SEG+0xd8>)
 8000f26:	f000 ffd0 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <update7SEG+0xd8>)
 8000f30:	f000 ffcb 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2108      	movs	r1, #8
 8000f38:	4826      	ldr	r0, [pc, #152]	; (8000fd4 <update7SEG+0xd8>)
 8000f3a:	f000 ffc6 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2110      	movs	r1, #16
 8000f42:	4824      	ldr	r0, [pc, #144]	; (8000fd4 <update7SEG+0xd8>)
 8000f44:	f000 ffc1 	bl	8001eca <HAL_GPIO_WritePin>
            break;
 8000f48:	e03f      	b.n	8000fca <update7SEG+0xce>
        case 1:
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4821      	ldr	r0, [pc, #132]	; (8000fd4 <update7SEG+0xd8>)
 8000f50:	f000 ffbb 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2104      	movs	r1, #4
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <update7SEG+0xd8>)
 8000f5a:	f000 ffb6 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2108      	movs	r1, #8
 8000f62:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <update7SEG+0xd8>)
 8000f64:	f000 ffb1 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <update7SEG+0xd8>)
 8000f6e:	f000 ffac 	bl	8001eca <HAL_GPIO_WritePin>
            break;
 8000f72:	e02a      	b.n	8000fca <update7SEG+0xce>
        case 2:
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2102      	movs	r1, #2
 8000f78:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <update7SEG+0xd8>)
 8000f7a:	f000 ffa6 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2104      	movs	r1, #4
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <update7SEG+0xd8>)
 8000f84:	f000 ffa1 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2108      	movs	r1, #8
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <update7SEG+0xd8>)
 8000f8e:	f000 ff9c 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2110      	movs	r1, #16
 8000f96:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <update7SEG+0xd8>)
 8000f98:	f000 ff97 	bl	8001eca <HAL_GPIO_WritePin>
            break;
 8000f9c:	e015      	b.n	8000fca <update7SEG+0xce>
        case 3:
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <update7SEG+0xd8>)
 8000fa4:	f000 ff91 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2104      	movs	r1, #4
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <update7SEG+0xd8>)
 8000fae:	f000 ff8c 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <update7SEG+0xd8>)
 8000fb8:	f000 ff87 	bl	8001eca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <update7SEG+0xd8>)
 8000fc2:	f000 ff82 	bl	8001eca <HAL_GPIO_WritePin>
            break;
 8000fc6:	e000      	b.n	8000fca <update7SEG+0xce>
        default:
            break;
 8000fc8:	bf00      	nop
    }
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40010800 	.word	0x40010800

08000fd8 <reset_7seg_counter>:

void reset_7seg_counter(){
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	if (red_7seg_counter <= 0) red_7seg_counter = led_red_duration;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <reset_7seg_counter+0x3c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dc03      	bgt.n	8000fec <reset_7seg_counter+0x14>
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <reset_7seg_counter+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <reset_7seg_counter+0x3c>)
 8000fea:	6013      	str	r3, [r2, #0]
	if (yellow_7seg_counter <= 0) yellow_7seg_counter = led_yellow_duration;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <reset_7seg_counter+0x44>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dc03      	bgt.n	8000ffc <reset_7seg_counter+0x24>
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <reset_7seg_counter+0x48>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <reset_7seg_counter+0x44>)
 8000ffa:	6013      	str	r3, [r2, #0]
	if (green_7seg_counter <= 0) green_7seg_counter = led_green_duration;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <reset_7seg_counter+0x4c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dc03      	bgt.n	800100c <reset_7seg_counter+0x34>
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <reset_7seg_counter+0x50>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <reset_7seg_counter+0x4c>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	200000b0 	.word	0x200000b0
 8001018:	20000058 	.word	0x20000058
 800101c:	200000b4 	.word	0x200000b4
 8001020:	2000005c 	.word	0x2000005c
 8001024:	200000b8 	.word	0x200000b8
 8001028:	20000060 	.word	0x20000060

0800102c <update_7seg_counter>:

void update_7seg_counter(){
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	red_7seg_counter = led_red_duration;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <update_7seg_counter+0x24>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <update_7seg_counter+0x28>)
 8001036:	6013      	str	r3, [r2, #0]
	yellow_7seg_counter = led_yellow_duration;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <update_7seg_counter+0x2c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <update_7seg_counter+0x30>)
 800103e:	6013      	str	r3, [r2, #0]
	green_7seg_counter = led_green_duration;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <update_7seg_counter+0x34>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <update_7seg_counter+0x38>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000058 	.word	0x20000058
 8001054:	200000b0 	.word	0x200000b0
 8001058:	2000005c 	.word	0x2000005c
 800105c:	200000b4 	.word	0x200000b4
 8001060:	20000060 	.word	0x20000060
 8001064:	200000b8 	.word	0x200000b8

08001068 <update_auto_buffer>:

void update_auto_buffer(){
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
    led_buffer[0] = red_7seg_counter / 10;
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <update_auto_buffer+0xa4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <update_auto_buffer+0xa8>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	1092      	asrs	r2, r2, #2
 8001078:	17db      	asrs	r3, r3, #31
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <update_auto_buffer+0xac>)
 800107e:	6013      	str	r3, [r2, #0]
    led_buffer[1] = yellow_7seg_counter / 10;
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <update_auto_buffer+0xb0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a22      	ldr	r2, [pc, #136]	; (8001110 <update_auto_buffer+0xa8>)
 8001086:	fb82 1203 	smull	r1, r2, r2, r3
 800108a:	1092      	asrs	r2, r2, #2
 800108c:	17db      	asrs	r3, r3, #31
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	4a20      	ldr	r2, [pc, #128]	; (8001114 <update_auto_buffer+0xac>)
 8001092:	6053      	str	r3, [r2, #4]
    led_buffer[2] = green_7seg_counter / 10;
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <update_auto_buffer+0xb4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <update_auto_buffer+0xa8>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	1092      	asrs	r2, r2, #2
 80010a0:	17db      	asrs	r3, r3, #31
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <update_auto_buffer+0xac>)
 80010a6:	6093      	str	r3, [r2, #8]
    led_buffer[3] = red_7seg_counter % 10;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <update_auto_buffer+0xa4>)
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <update_auto_buffer+0xa8>)
 80010ae:	fb83 2301 	smull	r2, r3, r3, r1
 80010b2:	109a      	asrs	r2, r3, #2
 80010b4:	17cb      	asrs	r3, r1, #31
 80010b6:	1ad2      	subs	r2, r2, r3
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	1aca      	subs	r2, r1, r3
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <update_auto_buffer+0xac>)
 80010c4:	60da      	str	r2, [r3, #12]
    led_buffer[4] = yellow_7seg_counter % 10;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <update_auto_buffer+0xb0>)
 80010c8:	6819      	ldr	r1, [r3, #0]
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <update_auto_buffer+0xa8>)
 80010cc:	fb83 2301 	smull	r2, r3, r3, r1
 80010d0:	109a      	asrs	r2, r3, #2
 80010d2:	17cb      	asrs	r3, r1, #31
 80010d4:	1ad2      	subs	r2, r2, r3
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	1aca      	subs	r2, r1, r3
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <update_auto_buffer+0xac>)
 80010e2:	611a      	str	r2, [r3, #16]
    led_buffer[5] = green_7seg_counter % 10;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <update_auto_buffer+0xb4>)
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <update_auto_buffer+0xa8>)
 80010ea:	fb83 2301 	smull	r2, r3, r3, r1
 80010ee:	109a      	asrs	r2, r3, #2
 80010f0:	17cb      	asrs	r3, r1, #31
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	1aca      	subs	r2, r1, r3
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <update_auto_buffer+0xac>)
 8001100:	615a      	str	r2, [r3, #20]
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200000b0 	.word	0x200000b0
 8001110:	66666667 	.word	0x66666667
 8001114:	20000070 	.word	0x20000070
 8001118:	200000b4 	.word	0x200000b4
 800111c:	200000b8 	.word	0x200000b8

08001120 <update_modify_buffer>:

void update_modify_buffer(){
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	mode_buffer[0] = 0;
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <update_modify_buffer+0xb0>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
    mode_buffer[1] = mode;
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <update_modify_buffer+0xb4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <update_modify_buffer+0xb0>)
 8001130:	6053      	str	r3, [r2, #4]

    led_counter_buffer[0] = red_counter / 10;
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <update_modify_buffer+0xb8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a29      	ldr	r2, [pc, #164]	; (80011dc <update_modify_buffer+0xbc>)
 8001138:	fb82 1203 	smull	r1, r2, r2, r3
 800113c:	1092      	asrs	r2, r2, #2
 800113e:	17db      	asrs	r3, r3, #31
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <update_modify_buffer+0xc0>)
 8001144:	6013      	str	r3, [r2, #0]
    led_counter_buffer[1] = yellow_counter / 10;
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <update_modify_buffer+0xc4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a24      	ldr	r2, [pc, #144]	; (80011dc <update_modify_buffer+0xbc>)
 800114c:	fb82 1203 	smull	r1, r2, r2, r3
 8001150:	1092      	asrs	r2, r2, #2
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <update_modify_buffer+0xc0>)
 8001158:	6053      	str	r3, [r2, #4]
    led_counter_buffer[2] = green_counter / 10;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <update_modify_buffer+0xc8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <update_modify_buffer+0xbc>)
 8001160:	fb82 1203 	smull	r1, r2, r2, r3
 8001164:	1092      	asrs	r2, r2, #2
 8001166:	17db      	asrs	r3, r3, #31
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <update_modify_buffer+0xc0>)
 800116c:	6093      	str	r3, [r2, #8]
    led_counter_buffer[3] = red_counter % 10;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <update_modify_buffer+0xb8>)
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <update_modify_buffer+0xbc>)
 8001174:	fb83 2301 	smull	r2, r3, r3, r1
 8001178:	109a      	asrs	r2, r3, #2
 800117a:	17cb      	asrs	r3, r1, #31
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	1aca      	subs	r2, r1, r3
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <update_modify_buffer+0xc0>)
 800118a:	60da      	str	r2, [r3, #12]
    led_counter_buffer[4] = yellow_counter % 10;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <update_modify_buffer+0xc4>)
 800118e:	6819      	ldr	r1, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <update_modify_buffer+0xbc>)
 8001192:	fb83 2301 	smull	r2, r3, r3, r1
 8001196:	109a      	asrs	r2, r3, #2
 8001198:	17cb      	asrs	r3, r1, #31
 800119a:	1ad2      	subs	r2, r2, r3
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	1aca      	subs	r2, r1, r3
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <update_modify_buffer+0xc0>)
 80011a8:	611a      	str	r2, [r3, #16]
    led_counter_buffer[5] = green_counter % 10;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <update_modify_buffer+0xc8>)
 80011ac:	6819      	ldr	r1, [r3, #0]
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <update_modify_buffer+0xbc>)
 80011b0:	fb83 2301 	smull	r2, r3, r3, r1
 80011b4:	109a      	asrs	r2, r3, #2
 80011b6:	17cb      	asrs	r3, r1, #31
 80011b8:	1ad2      	subs	r2, r2, r3
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	1aca      	subs	r2, r1, r3
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <update_modify_buffer+0xc0>)
 80011c6:	615a      	str	r2, [r3, #20]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	200000a0 	.word	0x200000a0
 80011d4:	20000054 	.word	0x20000054
 80011d8:	20000064 	.word	0x20000064
 80011dc:	66666667 	.word	0x66666667
 80011e0:	20000088 	.word	0x20000088
 80011e4:	20000068 	.word	0x20000068
 80011e8:	2000006c 	.word	0x2000006c

080011ec <led_7seg_run>:

void led_7seg_run(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	if (mode == 1) {
 80011f0:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <led_7seg_run+0xf4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d12d      	bne.n	8001254 <led_7seg_run+0x68>
	    if (index_led < 2) display7SEG(led_buffer[(index_led % 2) * 3 + led_color_pair[0]]);
 80011f8:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <led_7seg_run+0xf8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	dc14      	bgt.n	800122a <led_7seg_run+0x3e>
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <led_7seg_run+0xf8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	bfb8      	it	lt
 800120c:	425b      	neglt	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	441a      	add	r2, r3
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <led_7seg_run+0xfc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a33      	ldr	r2, [pc, #204]	; (80012ec <led_7seg_run+0x100>)
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fcda 	bl	8000bdc <display7SEG>
 8001228:	e036      	b.n	8001298 <led_7seg_run+0xac>
	    else display7SEG(led_buffer[(index_led % 2) * 3 + led_color_pair[1]]);
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <led_7seg_run+0xf8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	bfb8      	it	lt
 8001236:	425b      	neglt	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	441a      	add	r2, r3
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <led_7seg_run+0xfc>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a29      	ldr	r2, [pc, #164]	; (80012ec <led_7seg_run+0x100>)
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fcc5 	bl	8000bdc <display7SEG>
 8001252:	e021      	b.n	8001298 <led_7seg_run+0xac>
	}
	else {
	    if (index_led < 2) display7SEG(mode_buffer[index_led]);
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <led_7seg_run+0xf8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	dc08      	bgt.n	800126e <led_7seg_run+0x82>
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <led_7seg_run+0xf8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <led_7seg_run+0x104>)
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fcb8 	bl	8000bdc <display7SEG>
 800126c:	e014      	b.n	8001298 <led_7seg_run+0xac>
	    else display7SEG(led_counter_buffer[(index_led % 2) * 3 + (mode - 2)]);
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <led_7seg_run+0xf8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	bfb8      	it	lt
 800127a:	425b      	neglt	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	441a      	add	r2, r3
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <led_7seg_run+0xf4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3b02      	subs	r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <led_7seg_run+0x108>)
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fca2 	bl	8000bdc <display7SEG>
	}
	index_led = index_led % MAX_LED_7SEG;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <led_7seg_run+0xf8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	425a      	negs	r2, r3
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	bf58      	it	pl
 80012a8:	4253      	negpl	r3, r2
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <led_7seg_run+0xf8>)
 80012ac:	6013      	str	r3, [r2, #0]
    if (isTimerExpired(3) == 1){
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 f954 	bl	800155c <isTimerExpired>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d10b      	bne.n	80012d2 <led_7seg_run+0xe6>
        update7SEG(index_led++);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <led_7seg_run+0xf8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	4908      	ldr	r1, [pc, #32]	; (80012e4 <led_7seg_run+0xf8>)
 80012c2:	600a      	str	r2, [r1, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe19 	bl	8000efc <update7SEG>
        setTimer(3, 250);
 80012ca:	21fa      	movs	r1, #250	; 0xfa
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f925 	bl	800151c <setTimer>
    }
    update_auto_buffer();
 80012d2:	f7ff fec9 	bl	8001068 <update_auto_buffer>
    update_modify_buffer();
 80012d6:	f7ff ff23 	bl	8001120 <update_modify_buffer>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000054 	.word	0x20000054
 80012e4:	20000128 	.word	0x20000128
 80012e8:	200000a8 	.word	0x200000a8
 80012ec:	20000070 	.word	0x20000070
 80012f0:	200000a0 	.word	0x200000a0
 80012f4:	20000088 	.word	0x20000088

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f000 fae4 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001300:	f000 f810 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001304:	f000 f896 	bl	8001434 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001308:	f000 f848 	bl	800139c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2);
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <main+0x28>)
 800130e:	f001 fa39 	bl	8002784 <HAL_TIM_Base_Start_IT>
  init_traffic();
 8001312:	f7ff fc3f 	bl	8000b94 <init_traffic>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_run();
 8001316:	f7ff f89f 	bl	8000458 <fsm_run>
	  led_7seg_run();
 800131a:	f7ff ff67 	bl	80011ec <led_7seg_run>
	  fsm_run();
 800131e:	e7fa      	b.n	8001316 <main+0x1e>
 8001320:	20000164 	.word	0x20000164

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b090      	sub	sp, #64	; 0x40
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0318 	add.w	r3, r7, #24
 800132e:	2228      	movs	r2, #40	; 0x28
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fdd6 	bl	8002ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134a:	2301      	movs	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134e:	2310      	movs	r3, #16
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fde6 	bl	8001f2c <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001366:	f000 f8d3 	bl	8001510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f852 	bl	800242c <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800138e:	f000 f8bf 	bl	8001510 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3740      	adds	r7, #64	; 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_TIM2_Init+0x94>)
 80013ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_TIM2_Init+0x94>)
 80013c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_TIM2_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_TIM2_Init+0x94>)
 80013d0:	2209      	movs	r2, #9
 80013d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_TIM2_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_TIM2_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e0:	4813      	ldr	r0, [pc, #76]	; (8001430 <MX_TIM2_Init+0x94>)
 80013e2:	f001 f97f 	bl	80026e4 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013ec:	f000 f890 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_TIM2_Init+0x94>)
 80013fe:	f001 fafd 	bl	80029fc <HAL_TIM_ConfigClockSource>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001408:	f000 f882 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_TIM2_Init+0x94>)
 800141a:	f001 fcd5 	bl	8002dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001424:	f000 f874 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000164 	.word	0x20000164

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <MX_GPIO_Init+0xb8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a27      	ldr	r2, [pc, #156]	; (80014ec <MX_GPIO_Init+0xb8>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <MX_GPIO_Init+0xb8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <MX_GPIO_Init+0xb8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MX_GPIO_Init+0xb8>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_GPIO_Init+0xb8>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	211e      	movs	r1, #30
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <MX_GPIO_Init+0xbc>)
 800147e:	f000 fd24 	bl	8001eca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|LED1_R_Pin
 8001482:	2200      	movs	r2, #0
 8001484:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8001488:	481a      	ldr	r0, [pc, #104]	; (80014f4 <MX_GPIO_Init+0xc0>)
 800148a:	f000 fd1e 	bl	8001eca <HAL_GPIO_WritePin>
                          |LED1_Y_Pin|LED1_G_Pin|LED2_R_Pin|LED2_Y_Pin
                          |LED2_G_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin
                          |SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 800148e:	231e      	movs	r3, #30
 8001490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2302      	movs	r3, #2
 800149c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <MX_GPIO_Init+0xbc>)
 80014a6:	f000 fb7f 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin LED1_R_Pin
                           LED1_Y_Pin LED1_G_Pin LED2_R_Pin LED2_Y_Pin
                           LED2_G_Pin SEG_D_Pin SEG_E_Pin SEG_F_Pin
                           SEG_G_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|LED1_R_Pin
 80014aa:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 80014ae:	60bb      	str	r3, [r7, #8]
                          |LED1_Y_Pin|LED1_G_Pin|LED2_R_Pin|LED2_Y_Pin
                          |LED2_G_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin
                          |SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
 80014ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	4619      	mov	r1, r3
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_GPIO_Init+0xc0>)
 80014c4:	f000 fb70 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTT_1_Pin BUTT_2_Pin BUTT_3_Pin */
  GPIO_InitStruct.Pin = BUTT_1_Pin|BUTT_2_Pin|BUTT_3_Pin;
 80014c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4619      	mov	r1, r3
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_GPIO_Init+0xbc>)
 80014de:	f000 fb63 	bl	8001ba8 <HAL_GPIO_Init>

}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010800 	.word	0x40010800
 80014f4:	40010c00 	.word	0x40010c00

080014f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	timer_run();
 8001500:	f000 f846 	bl	8001590 <timer_run>
	getKeyInput();
 8001504:	f7fe fe3c 	bl	8000180 <getKeyInput>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x8>
	...

0800151c <setTimer>:

int timer_counter[MAX_PARAM] = {0};
int timer_flag[MAX_PARAM] = {0};


void setTimer(int index, int duration){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
    timer_counter[index] = duration / TICK;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	4a09      	ldr	r2, [pc, #36]	; (8001550 <setTimer+0x34>)
 800152a:	fb82 1203 	smull	r1, r2, r2, r3
 800152e:	1092      	asrs	r2, r2, #2
 8001530:	17db      	asrs	r3, r3, #31
 8001532:	1ad2      	subs	r2, r2, r3
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <setTimer+0x38>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    timer_flag[index] = 0;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <setTimer+0x3c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2100      	movs	r1, #0
 8001542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	66666667 	.word	0x66666667
 8001554:	2000012c 	.word	0x2000012c
 8001558:	20000140 	.word	0x20000140

0800155c <isTimerExpired>:

int isTimerExpired(int index){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	if(timer_flag[index] == 1){
 8001564:	4a09      	ldr	r2, [pc, #36]	; (800158c <isTimerExpired+0x30>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d106      	bne.n	800157e <isTimerExpired+0x22>
		timer_flag[index] = 0;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <isTimerExpired+0x30>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2100      	movs	r1, #0
 8001576:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <isTimerExpired+0x24>
	}
	return 0;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000140 	.word	0x20000140

08001590 <timer_run>:

void timer_run(){
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_PARAM; i++){
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	e01c      	b.n	80015d6 <timer_run+0x46>
        if(timer_counter[i] > 0){
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <timer_run+0x58>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dd13      	ble.n	80015d0 <timer_run+0x40>
            timer_counter[i]--;
 80015a8:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <timer_run+0x58>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	1e5a      	subs	r2, r3, #1
 80015b2:	490d      	ldr	r1, [pc, #52]	; (80015e8 <timer_run+0x58>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (timer_counter[i] == 0) timer_flag[i] = 1;
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <timer_run+0x58>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d104      	bne.n	80015d0 <timer_run+0x40>
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <timer_run+0x5c>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2101      	movs	r1, #1
 80015cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAX_PARAM; i++){
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	dddf      	ble.n	800159c <timer_run+0xc>
        }
    }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	2000012c 	.word	0x2000012c
 80015ec:	20000140 	.word	0x20000140

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_MspInit+0x5c>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_MspInit+0x5c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_MspInit+0x5c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x5c>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_MspInit+0x5c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x5c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_MspInit+0x60>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_MspInit+0x60>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001664:	d113      	bne.n	800168e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	201c      	movs	r0, #28
 8001684:	f000 fa59 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001688:	201c      	movs	r0, #28
 800168a:	f000 fa72 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e2:	f000 f937 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM2_IRQHandler+0x10>)
 80016f2:	f001 f893 	bl	800281c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000164 	.word	0x20000164

08001700 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <led_clear>:
							 LED2_R_GPIO_Port, LED2_Y_GPIO_Port, LED2_G_GPIO_Port};
uint16_t led_pins[] = {LED1_R_Pin, LED1_Y_Pin, LED1_G_Pin, LED2_R_Pin, LED2_Y_Pin, LED2_G_Pin};
int pin_logic_value[] = {GPIO_PIN_RESET, GPIO_PIN_SET};


void led_clear(){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001716:	4811      	ldr	r0, [pc, #68]	; (800175c <led_clear+0x50>)
 8001718:	f000 fbd7 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001722:	480e      	ldr	r0, [pc, #56]	; (800175c <led_clear+0x50>)
 8001724:	f000 fbd1 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <led_clear+0x50>)
 8001730:	f000 fbcb 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_R_GPIO_Port, LED2_R_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <led_clear+0x50>)
 800173c:	f000 fbc5 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_Y_GPIO_Port, LED2_Y_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <led_clear+0x50>)
 8001748:	f000 fbbf 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_G_GPIO_Port, LED2_G_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001752:	4802      	ldr	r0, [pc, #8]	; (800175c <led_clear+0x50>)
 8001754:	f000 fbb9 	bl	8001eca <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40010c00 	.word	0x40010c00

08001760 <led_control>:

void led_control(int ledth, int color){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(led_ports[ledth * 3], led_pins[ledth * 3], pin_logic_value[(color == RED)]);
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	4a2c      	ldr	r2, [pc, #176]	; (8001824 <led_control+0xc4>)
 8001774:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	4a29      	ldr	r2, [pc, #164]	; (8001828 <led_control+0xc8>)
 8001782:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <led_control+0xcc>)
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	f000 fb94 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_ports[ledth * 3 + 1], led_pins[ledth * 3 + 1], pin_logic_value[(color == YELLOW)]);
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	3301      	adds	r3, #1
 80017ac:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <led_control+0xc4>)
 80017ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a1a      	ldr	r2, [pc, #104]	; (8001828 <led_control+0xc8>)
 80017be:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <led_control+0xcc>)
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	f000 fb76 	bl	8001eca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_ports[ledth * 3 + 2], led_pins[ledth * 3 + 2], pin_logic_value[(color == GREEN)]);
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	3302      	adds	r3, #2
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <led_control+0xc4>)
 80017ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	3302      	adds	r3, #2
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <led_control+0xc8>)
 80017fa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b02      	cmp	r3, #2
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <led_control+0xcc>)
 800180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	f000 fb58 	bl	8001eca <HAL_GPIO_WritePin>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200000c0 	.word	0x200000c0
 8001828:	200000d8 	.word	0x200000d8
 800182c:	200000e4 	.word	0x200000e4

08001830 <led_blinking>:

void led_blinking(int color){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(led_ports[color], led_pins[color]);
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <led_blinking+0x44>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001840:	490d      	ldr	r1, [pc, #52]	; (8001878 <led_blinking+0x48>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f000 fb55 	bl	8001efa <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(led_ports[color + 3], led_pins[color + 3]);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3303      	adds	r3, #3
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <led_blinking+0x44>)
 8001856:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3303      	adds	r3, #3
 800185e:	4906      	ldr	r1, [pc, #24]	; (8001878 <led_blinking+0x48>)
 8001860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001864:	4619      	mov	r1, r3
 8001866:	4610      	mov	r0, r2
 8001868:	f000 fb47 	bl	8001efa <HAL_GPIO_TogglePin>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200000c0 	.word	0x200000c0
 8001878:	200000d8 	.word	0x200000d8

0800187c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800187c:	f7ff ff40 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001880:	480b      	ldr	r0, [pc, #44]	; (80018b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001882:	490c      	ldr	r1, [pc, #48]	; (80018b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001898:	4c09      	ldr	r4, [pc, #36]	; (80018c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a6:	f001 faf9 	bl	8002e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018aa:	f7ff fd25 	bl	80012f8 <main>
  bx lr
 80018ae:	4770      	bx	lr
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 80018b8:	08002f38 	.word	0x08002f38
  ldr r2, =_sbss
 80018bc:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80018c0:	200001b0 	.word	0x200001b0

080018c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_2_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_Init+0x28>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_Init+0x28>)
 80018d2:	f043 0310 	orr.w	r3, r3, #16
 80018d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 f923 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018de:	200f      	movs	r0, #15
 80018e0:	f000 f808 	bl	80018f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e4:	f7ff fe84 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40022000 	.word	0x40022000

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x54>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x58>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	fbb3 f3f1 	udiv	r3, r3, r1
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f93b 	bl	8001b8e <HAL_SYSTICK_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d80a      	bhi.n	800193e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f000 f903 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_InitTick+0x5c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200000bc 	.word	0x200000bc
 800194c:	200000f0 	.word	0x200000f0
 8001950:	200000ec 	.word	0x200000ec

08001954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_IncTick+0x1c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_IncTick+0x20>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <HAL_IncTick+0x20>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	200000f0 	.word	0x200000f0
 8001974:	200001ac 	.word	0x200001ac

08001978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_GetTick+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	200001ac 	.word	0x200001ac

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4906      	ldr	r1, [pc, #24]	; (8001a24 <__NVIC_EnableIRQ+0x34>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff90 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff2d 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff42 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff90 	bl	8001a7c <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5f 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff35 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b08b      	sub	sp, #44	; 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e148      	b.n	8001e4e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8137 	bne.w	8001e48 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4aa3      	ldr	r2, [pc, #652]	; (8001e6c <HAL_GPIO_Init+0x2c4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d05e      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001be4:	4aa1      	ldr	r2, [pc, #644]	; (8001e6c <HAL_GPIO_Init+0x2c4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d875      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bea:	4aa1      	ldr	r2, [pc, #644]	; (8001e70 <HAL_GPIO_Init+0x2c8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d058      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bf0:	4a9f      	ldr	r2, [pc, #636]	; (8001e70 <HAL_GPIO_Init+0x2c8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d86f      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bf6:	4a9f      	ldr	r2, [pc, #636]	; (8001e74 <HAL_GPIO_Init+0x2cc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d052      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bfc:	4a9d      	ldr	r2, [pc, #628]	; (8001e74 <HAL_GPIO_Init+0x2cc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d869      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c02:	4a9d      	ldr	r2, [pc, #628]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d04c      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c08:	4a9b      	ldr	r2, [pc, #620]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d863      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c0e:	4a9b      	ldr	r2, [pc, #620]	; (8001e7c <HAL_GPIO_Init+0x2d4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d046      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c14:	4a99      	ldr	r2, [pc, #612]	; (8001e7c <HAL_GPIO_Init+0x2d4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d85d      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d82a      	bhi.n	8001c74 <HAL_GPIO_Init+0xcc>
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d859      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <HAL_GPIO_Init+0x80>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001ca3 	.word	0x08001ca3
 8001c2c:	08001c7d 	.word	0x08001c7d
 8001c30:	08001c8f 	.word	0x08001c8f
 8001c34:	08001cd1 	.word	0x08001cd1
 8001c38:	08001cd7 	.word	0x08001cd7
 8001c3c:	08001cd7 	.word	0x08001cd7
 8001c40:	08001cd7 	.word	0x08001cd7
 8001c44:	08001cd7 	.word	0x08001cd7
 8001c48:	08001cd7 	.word	0x08001cd7
 8001c4c:	08001cd7 	.word	0x08001cd7
 8001c50:	08001cd7 	.word	0x08001cd7
 8001c54:	08001cd7 	.word	0x08001cd7
 8001c58:	08001cd7 	.word	0x08001cd7
 8001c5c:	08001cd7 	.word	0x08001cd7
 8001c60:	08001cd7 	.word	0x08001cd7
 8001c64:	08001cd7 	.word	0x08001cd7
 8001c68:	08001cd7 	.word	0x08001cd7
 8001c6c:	08001c85 	.word	0x08001c85
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	4a82      	ldr	r2, [pc, #520]	; (8001e80 <HAL_GPIO_Init+0x2d8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c7a:	e02c      	b.n	8001cd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e029      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e024      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	3308      	adds	r3, #8
 8001c94:	623b      	str	r3, [r7, #32]
          break;
 8001c96:	e01f      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e01a      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001caa:	2304      	movs	r3, #4
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e013      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	611a      	str	r2, [r3, #16]
          break;
 8001cc2:	e009      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	615a      	str	r2, [r3, #20]
          break;
 8001cce:	e003      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          break;
 8001cd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2bff      	cmp	r3, #255	; 0xff
 8001cdc:	d801      	bhi.n	8001ce2 <HAL_GPIO_Init+0x13a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_Init+0x13e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	; 0xff
 8001cec:	d802      	bhi.n	8001cf4 <HAL_GPIO_Init+0x14c>
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	e002      	b.n	8001cfa <HAL_GPIO_Init+0x152>
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	3b08      	subs	r3, #8
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	210f      	movs	r1, #15
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	6a39      	ldr	r1, [r7, #32]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8090 	beq.w	8001e48 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d28:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a55      	ldr	r2, [pc, #340]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_GPIO_Init+0x2dc>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d40:	4a51      	ldr	r2, [pc, #324]	; (8001e88 <HAL_GPIO_Init+0x2e0>)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <HAL_GPIO_Init+0x2e4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <HAL_GPIO_Init+0x1e0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a48      	ldr	r2, [pc, #288]	; (8001e90 <HAL_GPIO_Init+0x2e8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x1dc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a47      	ldr	r2, [pc, #284]	; (8001e94 <HAL_GPIO_Init+0x2ec>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_GPIO_Init+0x1d8>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e004      	b.n	8001d8a <HAL_GPIO_Init+0x1e2>
 8001d80:	2303      	movs	r3, #3
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_Init+0x1e2>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_GPIO_Init+0x1e2>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	f002 0203 	and.w	r2, r2, #3
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	4093      	lsls	r3, r2
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d9a:	493b      	ldr	r1, [pc, #236]	; (8001e88 <HAL_GPIO_Init+0x2e0>)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db4:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4937      	ldr	r1, [pc, #220]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc2:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4933      	ldr	r1, [pc, #204]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	492d      	ldr	r1, [pc, #180]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dea:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4929      	ldr	r1, [pc, #164]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4923      	ldr	r1, [pc, #140]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	491f      	ldr	r1, [pc, #124]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4919      	ldr	r1, [pc, #100]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	4915      	ldr	r1, [pc, #84]	; (8001e98 <HAL_GPIO_Init+0x2f0>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f aeaf 	bne.w	8001bbc <HAL_GPIO_Init+0x14>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	372c      	adds	r7, #44	; 0x2c
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	10320000 	.word	0x10320000
 8001e70:	10310000 	.word	0x10310000
 8001e74:	10220000 	.word	0x10220000
 8001e78:	10210000 	.word	0x10210000
 8001e7c:	10120000 	.word	0x10120000
 8001e80:	10110000 	.word	0x10110000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40010800 	.word	0x40010800
 8001e90:	40010c00 	.word	0x40010c00
 8001e94:	40011000 	.word	0x40011000
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e001      	b.n	8001ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	807b      	strh	r3, [r7, #2]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eda:	787b      	ldrb	r3, [r7, #1]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee0:	887a      	ldrh	r2, [r7, #2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ee6:	e003      	b.n	8001ef0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	041a      	lsls	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	611a      	str	r2, [r3, #16]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4013      	ands	r3, r2
 8001f12:	041a      	lsls	r2, r3, #16
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	887b      	ldrh	r3, [r7, #2]
 8001f1a:	400b      	ands	r3, r1
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	611a      	str	r2, [r3, #16]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e26c      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f4c:	4b92      	ldr	r3, [pc, #584]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d00c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f58:	4b8f      	ldr	r3, [pc, #572]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d112      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
 8001f64:	4b8c      	ldr	r3, [pc, #560]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d10b      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f72:	4b89      	ldr	r3, [pc, #548]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d06c      	beq.n	8002058 <HAL_RCC_OscConfig+0x12c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d168      	bne.n	8002058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e246      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x76>
 8001f94:	4b80      	ldr	r3, [pc, #512]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a7f      	ldr	r2, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e02e      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b78      	ldr	r3, [pc, #480]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e01d      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xbc>
 8001fce:	4b72      	ldr	r3, [pc, #456]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a71      	ldr	r2, [pc, #452]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6e      	ldr	r2, [pc, #440]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	4b6b      	ldr	r3, [pc, #428]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a6a      	ldr	r2, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a67      	ldr	r2, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fcb6 	bl	8001978 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff fcb2 	bl	8001978 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1fa      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0xe4>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fca2 	bl	8001978 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff fc9e 	bl	8001978 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1e6      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x10c>
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d063      	beq.n	800212e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b08      	cmp	r3, #8
 800207c:	d11c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x18c>
 800207e:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e1ba      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4939      	ldr	r1, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	e03a      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff fc57 	bl	8001978 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ce:	f7ff fc53 	bl	8001978 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e19b      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4927      	ldr	r1, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	e015      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fc36 	bl	8001978 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002110:	f7ff fc32 	bl	8001978 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e17a      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03a      	beq.n	80021b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d019      	beq.n	8002176 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7ff fc16 	bl	8001978 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7ff fc12 	bl	8001978 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e15a      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800216e:	2001      	movs	r0, #1
 8002170:	f000 fa9a 	bl	80026a8 <RCC_Delay>
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7ff fbfc 	bl	8001978 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002182:	e00f      	b.n	80021a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7ff fbf8 	bl	8001978 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d908      	bls.n	80021a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e140      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	42420000 	.word	0x42420000
 80021a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	4b9e      	ldr	r3, [pc, #632]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e9      	bne.n	8002184 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a6 	beq.w	800230a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4b97      	ldr	r3, [pc, #604]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10d      	bne.n	80021ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	4b94      	ldr	r3, [pc, #592]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a93      	ldr	r2, [pc, #588]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b91      	ldr	r3, [pc, #580]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b8e      	ldr	r3, [pc, #568]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b8b      	ldr	r3, [pc, #556]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a8a      	ldr	r2, [pc, #552]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7ff fbb9 	bl	8001978 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7ff fbb5 	bl	8001978 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b64      	cmp	r3, #100	; 0x64
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0fd      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b81      	ldr	r3, [pc, #516]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x312>
 8002230:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	e02d      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x334>
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a72      	ldr	r2, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	f023 0304 	bic.w	r3, r3, #4
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	e01c      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x356>
 8002268:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a6c      	ldr	r2, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	4b6a      	ldr	r3, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a69      	ldr	r2, [pc, #420]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 8002282:	4b67      	ldr	r3, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a66      	ldr	r2, [pc, #408]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b64      	ldr	r3, [pc, #400]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a63      	ldr	r2, [pc, #396]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d015      	beq.n	80022ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7ff fb69 	bl	8001978 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7ff fb65 	bl	8001978 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0ab      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ee      	beq.n	80022aa <HAL_RCC_OscConfig+0x37e>
 80022cc:	e014      	b.n	80022f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7ff fb53 	bl	8001978 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7ff fb4f 	bl	8001978 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e095      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ec:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ee      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fe:	4b48      	ldr	r3, [pc, #288]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a47      	ldr	r2, [pc, #284]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8081 	beq.w	8002416 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002314:	4b42      	ldr	r3, [pc, #264]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d061      	beq.n	80023e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d146      	bne.n	80023b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <HAL_RCC_OscConfig+0x4fc>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7ff fb23 	bl	8001978 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7ff fb1f 	bl	8001978 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e067      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d108      	bne.n	8002370 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800235e:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	492d      	ldr	r1, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a19      	ldr	r1, [r3, #32]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	430b      	orrs	r3, r1
 8002382:	4927      	ldr	r1, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x4fc>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7ff faf3 	bl	8001978 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7ff faef 	bl	8001978 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e037      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x46a>
 80023b4:	e02f      	b.n	8002416 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_RCC_OscConfig+0x4fc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7ff fadc 	bl	8001978 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7ff fad8 	bl	8001978 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e020      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x498>
 80023e2:	e018      	b.n	8002416 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e013      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	429a      	cmp	r2, r3
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
 8002428:	42420060 	.word	0x42420060

0800242c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0d0      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4965      	ldr	r1, [pc, #404]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0b8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002492:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d040      	beq.n	800254c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e073      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06b      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4936      	ldr	r1, [pc, #216]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7ff fa2c 	bl	8001978 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7ff fa28 	bl	8001978 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e053      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d210      	bcs.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e032      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ba:	f000 f821 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	490a      	ldr	r1, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	5ccb      	ldrb	r3, [r1, r3]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1cc>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff f98a 	bl	80018f4 <HAL_InitTick>

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08002f0c 	.word	0x08002f0c
 80025f8:	200000bc 	.word	0x200000bc
 80025fc:	200000ec 	.word	0x200000ec

08002600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCC_GetSysClockFreq+0x94>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b04      	cmp	r3, #4
 8002628:	d002      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x30>
 800262a:	2b08      	cmp	r3, #8
 800262c:	d003      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x36>
 800262e:	e027      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_GetSysClockFreq+0x98>)
 8002632:	613b      	str	r3, [r7, #16]
      break;
 8002634:	e027      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	0c9b      	lsrs	r3, r3, #18
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	4a17      	ldr	r2, [pc, #92]	; (800269c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
 8002642:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d010      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_RCC_GetSysClockFreq+0x94>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0c5b      	lsrs	r3, r3, #17
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <HAL_RCC_GetSysClockFreq+0x98>)
 8002662:	fb02 f203 	mul.w	r2, r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	fbb2 f3f3 	udiv	r3, r2, r3
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	e004      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	613b      	str	r3, [r7, #16]
      break;
 800267e:	e002      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetSysClockFreq+0x98>)
 8002682:	613b      	str	r3, [r7, #16]
      break;
 8002684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002686:	693b      	ldr	r3, [r7, #16]
}
 8002688:	4618      	mov	r0, r3
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	007a1200 	.word	0x007a1200
 800269c:	08002f1c 	.word	0x08002f1c
 80026a0:	08002f2c 	.word	0x08002f2c
 80026a4:	003d0900 	.word	0x003d0900

080026a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <RCC_Delay+0x34>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <RCC_Delay+0x38>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0a5b      	lsrs	r3, r3, #9
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c4:	bf00      	nop
  }
  while (Delay --);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <RCC_Delay+0x1c>
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	200000bc 	.word	0x200000bc
 80026e0:	10624dd3 	.word	0x10624dd3

080026e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e041      	b.n	800277a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe ffa2 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3304      	adds	r3, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f000 fa56 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d001      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e035      	b.n	8002808 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_TIM_Base_Start_IT+0x90>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d009      	beq.n	80027d2 <HAL_TIM_Base_Start_IT+0x4e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c6:	d004      	beq.n	80027d2 <HAL_TIM_Base_Start_IT+0x4e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a12      	ldr	r2, [pc, #72]	; (8002818 <HAL_TIM_Base_Start_IT+0x94>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d111      	bne.n	80027f6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d010      	beq.n	8002806 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f4:	e007      	b.n	8002806 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40000400 	.word	0x40000400

0800281c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d020      	beq.n	8002880 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01b      	beq.n	8002880 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0202 	mvn.w	r2, #2
 8002850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f998 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 800286c:	e005      	b.n	800287a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f98b 	bl	8002b8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f99a 	bl	8002bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d020      	beq.n	80028cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01b      	beq.n	80028cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0204 	mvn.w	r2, #4
 800289c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f972 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f965 	bl	8002b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f974 	bl	8002bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d020      	beq.n	8002918 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01b      	beq.n	8002918 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0208 	mvn.w	r2, #8
 80028e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2204      	movs	r2, #4
 80028ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f94c 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f93f 	bl	8002b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f94e 	bl	8002bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	d020      	beq.n	8002964 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01b      	beq.n	8002964 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0210 	mvn.w	r2, #16
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2208      	movs	r2, #8
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f926 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f919 	bl	8002b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f928 	bl	8002bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0201 	mvn.w	r2, #1
 8002980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fdb8 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa6f 	bl	8002e8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8f8 	bl	8002bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0220 	mvn.w	r2, #32
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa42 	bl	8002e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_TIM_ConfigClockSource+0x1c>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0b4      	b.n	8002b82 <HAL_TIM_ConfigClockSource+0x186>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a50:	d03e      	beq.n	8002ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8002a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a56:	f200 8087 	bhi.w	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
 8002a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5e:	f000 8086 	beq.w	8002b6e <HAL_TIM_ConfigClockSource+0x172>
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a66:	d87f      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
 8002a68:	2b70      	cmp	r3, #112	; 0x70
 8002a6a:	d01a      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d87b      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
 8002a70:	2b60      	cmp	r3, #96	; 0x60
 8002a72:	d050      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x11a>
 8002a74:	2b60      	cmp	r3, #96	; 0x60
 8002a76:	d877      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
 8002a78:	2b50      	cmp	r3, #80	; 0x50
 8002a7a:	d03c      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0xfa>
 8002a7c:	2b50      	cmp	r3, #80	; 0x50
 8002a7e:	d873      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d058      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x13a>
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d86f      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
 8002a88:	2b30      	cmp	r3, #48	; 0x30
 8002a8a:	d064      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x15a>
 8002a8c:	2b30      	cmp	r3, #48	; 0x30
 8002a8e:	d86b      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d060      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x15a>
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d867      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05c      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x15a>
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d05a      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x15a>
 8002aa0:	e062      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f000 f96a 	bl	8002d8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	609a      	str	r2, [r3, #8]
      break;
 8002ace:	e04f      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6899      	ldr	r1, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f000 f953 	bl	8002d8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002af2:	609a      	str	r2, [r3, #8]
      break;
 8002af4:	e03c      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 f8ca 	bl	8002c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2150      	movs	r1, #80	; 0x50
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f921 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002b14:	e02c      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 f8e8 	bl	8002cf8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2160      	movs	r1, #96	; 0x60
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f911 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002b34:	e01c      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 f8aa 	bl	8002c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2140      	movs	r1, #64	; 0x40
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f901 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002b54:	e00c      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4610      	mov	r0, r2
 8002b62:	f000 f8f8 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002b66:	e003      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6c:	e000      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
	...

08002bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a2b      	ldr	r2, [pc, #172]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d007      	beq.n	8002bfc <TIM_Base_SetConfig+0x28>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf2:	d003      	beq.n	8002bfc <TIM_Base_SetConfig+0x28>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a28      	ldr	r2, [pc, #160]	; (8002c98 <TIM_Base_SetConfig+0xc4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d108      	bne.n	8002c0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a20      	ldr	r2, [pc, #128]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <TIM_Base_SetConfig+0x52>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1c:	d003      	beq.n	8002c26 <TIM_Base_SetConfig+0x52>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <TIM_Base_SetConfig+0xc4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d108      	bne.n	8002c38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <TIM_Base_SetConfig+0xc0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d103      	bne.n	8002c6c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f023 0201 	bic.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	611a      	str	r2, [r3, #16]
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400

08002c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f023 0201 	bic.w	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f023 030a 	bic.w	r3, r3, #10
 8002cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	621a      	str	r2, [r3, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f023 0210 	bic.w	r2, r3, #16
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	031b      	lsls	r3, r3, #12
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f043 0307 	orr.w	r3, r3, #7
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b087      	sub	sp, #28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002da4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	021a      	lsls	r2, r3, #8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	609a      	str	r2, [r3, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e041      	b.n	8002e64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d009      	beq.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d004      	beq.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a10      	ldr	r2, [pc, #64]	; (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d10c      	bne.n	8002e52 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40000400 	.word	0x40000400

08002e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <__libc_init_array>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	2600      	movs	r6, #0
 8002ea0:	4d0c      	ldr	r5, [pc, #48]	; (8002ed4 <__libc_init_array+0x38>)
 8002ea2:	4c0d      	ldr	r4, [pc, #52]	; (8002ed8 <__libc_init_array+0x3c>)
 8002ea4:	1b64      	subs	r4, r4, r5
 8002ea6:	10a4      	asrs	r4, r4, #2
 8002ea8:	42a6      	cmp	r6, r4
 8002eaa:	d109      	bne.n	8002ec0 <__libc_init_array+0x24>
 8002eac:	f000 f822 	bl	8002ef4 <_init>
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	4d0a      	ldr	r5, [pc, #40]	; (8002edc <__libc_init_array+0x40>)
 8002eb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ee0 <__libc_init_array+0x44>)
 8002eb6:	1b64      	subs	r4, r4, r5
 8002eb8:	10a4      	asrs	r4, r4, #2
 8002eba:	42a6      	cmp	r6, r4
 8002ebc:	d105      	bne.n	8002eca <__libc_init_array+0x2e>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec4:	4798      	blx	r3
 8002ec6:	3601      	adds	r6, #1
 8002ec8:	e7ee      	b.n	8002ea8 <__libc_init_array+0xc>
 8002eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ece:	4798      	blx	r3
 8002ed0:	3601      	adds	r6, #1
 8002ed2:	e7f2      	b.n	8002eba <__libc_init_array+0x1e>
 8002ed4:	08002f30 	.word	0x08002f30
 8002ed8:	08002f30 	.word	0x08002f30
 8002edc:	08002f30 	.word	0x08002f30
 8002ee0:	08002f34 	.word	0x08002f34

08002ee4 <memset>:
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4402      	add	r2, r0
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d100      	bne.n	8002eee <memset+0xa>
 8002eec:	4770      	bx	lr
 8002eee:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef2:	e7f9      	b.n	8002ee8 <memset+0x4>

08002ef4 <_init>:
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	bf00      	nop
 8002ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efa:	bc08      	pop	{r3}
 8002efc:	469e      	mov	lr, r3
 8002efe:	4770      	bx	lr

08002f00 <_fini>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	bf00      	nop
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr
